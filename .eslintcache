[{"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx":"1","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx":"3","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx":"4","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx":"5","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro.tsx":"6","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\MainMenu.tsx":"7","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\LandingMenu.tsx":"8","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx":"9","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx":"10","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\PrivateGame.tsx":"11","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx":"12","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx":"13","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx":"14","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx":"15","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\GameSocket.ts":"16","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\HTTPRequests.ts":"17","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\RandomGame.tsx":"18","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx":"19"},{"size":500,"mtime":1610837147249,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":686,"mtime":1611338507536,"results":"23","hashOfConfig":"21"},{"size":2863,"mtime":1611359519621,"results":"24","hashOfConfig":"21"},{"size":121,"mtime":1611267688561,"results":"25","hashOfConfig":"21"},{"size":1361,"mtime":1611267664966,"results":"26","hashOfConfig":"21"},{"size":2024,"mtime":1611349285824,"results":"27","hashOfConfig":"21"},{"size":1524,"mtime":1611349311635,"results":"28","hashOfConfig":"21"},{"size":4793,"mtime":1611354768368,"results":"29","hashOfConfig":"21"},{"size":1568,"mtime":1611338673792,"results":"30","hashOfConfig":"21"},{"size":2689,"mtime":1611348989709,"results":"31","hashOfConfig":"21"},{"size":1781,"mtime":1611515345479,"results":"32","hashOfConfig":"21"},{"size":3159,"mtime":1611525650694,"results":"33","hashOfConfig":"21"},{"size":2053,"mtime":1611599416853,"results":"34","hashOfConfig":"21"},{"size":3773,"mtime":1611599603322,"results":"35","hashOfConfig":"21"},{"size":3506,"mtime":1611521031720,"results":"36","hashOfConfig":"21"},{"size":641,"mtime":1611433067414,"results":"37","hashOfConfig":"21"},{"size":2915,"mtime":1611425290448,"results":"38","hashOfConfig":"21"},{"size":2789,"mtime":1611357431185,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"tp3sg3",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx",[],["85","86"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx",["87"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    initiateSocket,\r\n    isSocketConnected,\r\n    sendPlayerReady,\r\n    subscribeToGameStatus,\r\n    GameStatusData,\r\n    GameStatus,\r\n    subscribeToInitialPosition,\r\n    GameUpdateData,\r\n} from '../api/GameSocket';\r\nimport { getAnonymousToken } from '../api/HTTPRequests';\r\nimport {\r\n    useParams,\r\n    useHistory,\r\n} from \"react-router-dom\";\r\nimport Game from './Game';\r\nimport Loading from './Loading';\r\n\r\ninterface PlayParams {\r\n    gameID: string;\r\n}\r\n\r\nfunction Play() {\r\n    const { gameID } = useParams<PlayParams>();\r\n\r\n    const history = useHistory();\r\n\r\n    // set the states\r\n    const [ready, setReady] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"Waiting for other player...\");\r\n    const [initialPosition, setInitialPosition] = useState({lat: 42.345573, lng: -71.098326});\r\n\r\n    // logic for connecting to the game\r\n    useEffect(() => {\r\n        // if no gameID, then redirect home\r\n        if (!gameID) return history.push('/');\r\n        // if joining from random game matching, socket should already be connected\r\n        if (isSocketConnected()) {\r\n            subscribeToInitialPosition(startingGame);\r\n            sendPlayerReady();\r\n            subscribeToGameStatus(waitForGame);\r\n        } else {\r\n            // get a token if one doesn't already exist, then connect to socket\r\n            const token = localStorage.getItem(process.env.REACT_APP_TOKEN_NAME!);\r\n            if (token) {\r\n                initiateSocket(token, gameID, afterSocketConnect);\r\n            } else {\r\n                getAnonymousToken()\r\n                .then( anonymousToken => {\r\n                    initiateSocket(anonymousToken, gameID, afterSocketConnect);\r\n                })\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const afterSocketConnect = () => {\r\n        console.log(\"Connected\")\r\n        subscribeToInitialPosition(startingGame);\r\n        sendPlayerReady();\r\n        subscribeToGameStatus(waitForGame);\r\n    }\r\n\r\n    const waitForGame = (data: GameStatusData) => {\r\n        if (data.status === GameStatus.Starting) {\r\n            setLoadingMessage(\"Starting...\");\r\n        } else if (data.status === GameStatus.InProgress) {\r\n            setLoadingMessage(\"Starting...\");\r\n        }\r\n    }\r\n\r\n    const startingGame = (initialPositionData: GameUpdateData) => {\r\n        console.log(\"This is the new initial position\");\r\n        console.log(initialPositionData.pos);\r\n        setInitialPosition(initialPositionData.pos)\r\n        setReady(true);\r\n    }\r\n\r\n\r\n    if (ready) {\r\n        return (\r\n            <Game\r\n                position={initialPosition}\r\n            />\r\n        );\r\n    } else {\r\n        return (\r\n            <Loading\r\n                loadingMessage={loadingMessage}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Play;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro.tsx",["88","89","90","91","92","93"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormHelperText,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MainMenu from './GameMenus/MainMenu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    introButtons: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(0),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    introTitle: {\r\n        color: \"black\",\r\n        \"font-family\": \"Arial, cursive\",\r\n        \"font-size\": \"4.7rem\",\r\n        \"text-align\": \"center\",\r\n        marginBottom: theme.spacing(8)\r\n    }\r\n}));\r\n\r\nfunction Intro() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.heroContent}>\r\n            <div>\r\n                <Typography className={classes.introTitle}>Congregate</Typography>\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <MainMenu />\r\n            </div>\r\n            <div className={classes.centered}>\r\n                    <Button className={classes.introButtons}>How to Play</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Intro;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\MainMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\LandingMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx",["94","95","96","97","98"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport {\r\n    initiateSocket,\r\n    disconnectSocket,\r\n    sendPlayerReady,\r\n    subscribeToGameStatus,\r\n    GameStatusData,\r\n    GameStatus,\r\n    GamePosition,\r\n    subscribeToInitialPosition,\r\n    GameUpdateData,\r\n    sendGameUpdate,\r\n} from '../api/GameSocket';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StreetView from './components/StreetView';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport EndGameMenu from './components/EndGameMenu';\r\n\r\nconst drawerWidth = 350;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        \"flex-flow\": \"column\",\r\n        height: \"100vh\",\r\n        width: \"100vw\"\r\n    },\r\n    topBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    topBarShift: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginRight: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            })\r\n        }\r\n    },\r\n    chatButton: {\r\n        marginRight: theme.spacing(1),\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    content: {\r\n        height: \"100%\",\r\n        display: \"flex\"\r\n    }\r\n}));\r\n\r\ninterface GameProps{\r\n    position: GamePosition;\r\n}\r\n\r\nfunction Game(props: GameProps) {\r\n    const classes = useStyles();\r\n\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const [endGameMessage, setEndGameMessage] = useState('');\r\n    const [endGameMenuOpen, setEndGameMenuOpen] = useState(false);\r\n\r\n    const handleChatToggle = () => {\r\n        setChatOpen(!chatOpen);\r\n    }\r\n\r\n    const handleEndGameMenuOpen = (open: boolean) => {\r\n        setEndGameMenuOpen(open);\r\n    }\r\n\r\n    const handlePositionChange = (newPosition: GamePosition) => {\r\n        sendGameUpdate({pos: newPosition});\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(handleGameStatus);\r\n    })\r\n\r\n    const handleGameStatus = (gameStatusData: GameStatusData) => {\r\n        if (gameStatusData.status === GameStatus.Win) {\r\n            setEndGameMessage(\"You found your friend!\");\r\n            setEndGameMenuOpen(true);\r\n        }\r\n        if (gameStatusData.status === GameStatus.Loss) {\r\n            setEndGameMessage(\"Time's Up!\");\r\n            setEndGameMenuOpen(true);\r\n        }\r\n    }\r\n\r\n    const streetViewOptions = {\r\n        position: props.position,\r\n        pov: { heading: 165, pitch: 0 },\r\n        motionTracking: false,\r\n        motionTrackingControl: false,\r\n        addressControl: false,\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={clsx(classes.topBar, {[classes.topBarShift]: chatOpen,})}>\r\n                <AppBar style={{backgroundColor: \"#4a4a50\"}} position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Time Remaining: 5:00\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Quit</Button>\r\n                        <IconButton edge=\"start\" className={classes.chatButton} color=\"inherit\" aria-label=\"chat\"\r\n                            onClick={handleChatToggle}\r\n                        >\r\n                            <ChatIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <ChatWindow\r\n                    chatOpen={chatOpen}\r\n                    handleChatToggle={handleChatToggle}\r\n                />\r\n            </div>\r\n            <div className={classes.content}>\r\n                {\r\n                    endGameMenuOpen &&\r\n                    <EndGameMenu\r\n                        message={endGameMessage}\r\n                        handleEndGameMenuOpen={handleEndGameMenuOpen}\r\n                    />\r\n                }\r\n                <StreetView\r\n                    apiKey={process.env.REACT_APP_MAPS_API_KEY!}\r\n                    streetViewOptions={streetViewOptions}\r\n                    onPositionChanged={handlePositionChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\PrivateGame.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx",["99"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport { Loader } from \"@googlemaps/js-api-loader\";\r\n\r\ninterface StreetViewProps {\r\n    apiKey: string;\r\n    streetViewOptions: google.maps.StreetViewPanoramaOptions;\r\n    onPositionChanged: (position: google.maps.LatLngLiteral) => void;\r\n};\r\n\r\nfunction StreetView(props: StreetViewProps) {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const loader = new Loader({\r\n        apiKey: props.apiKey,\r\n        version: \"weekly\"\r\n    })\r\n    const [streetView, setStreetView] = useState<google.maps.StreetViewPanorama>();\r\n\r\n    useEffect(() => {\r\n        createView(ref);\r\n        return () => {\r\n            google.maps.event.clearInstanceListeners(streetView!);\r\n        }\r\n    },[props.streetViewOptions.position])\r\n\r\n    useEffect(() => {\r\n        if (streetView) {\r\n            streetView!.addListener('position_changed', () => {\r\n                props.onPositionChanged(streetView!.getPosition().toJSON());\r\n            })\r\n        }\r\n    })\r\n\r\n    const createView = (ref: React.RefObject<HTMLDivElement>) => {\r\n        if (!streetView) {\r\n            loader\r\n            .load()\r\n            .then(() => {\r\n                setStreetView(new google.maps.StreetViewPanorama(ref.current!, props.streetViewOptions));\r\n                streetView!.addListener('position_changed', () => {\r\n                    props.onPositionChanged(streetView!.getPosition().toJSON());\r\n                })\r\n            })\r\n            .catch(e => {\r\n                console.error(e);\r\n            });\r\n        } else {\r\n            streetView.setPosition(props.streetViewOptions.position!);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '100%', width: \"100%\" }} ref={ref}/>\r\n    );\r\n\r\n}\r\n\r\nexport default StreetView;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx",["100","101","102","103","104"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx",["105"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx",["106","107"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\GameSocket.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\HTTPRequests.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\RandomGame.tsx",["108"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    initiateSocket,\r\n    disconnectSocket,\r\n    subscribeToMatchSuccess,\r\n    MatchSuccessData,\r\n} from '../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { getAnonymousToken } from '../../api/HTTPRequests';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MainMenuState } from './MainMenu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    instructions: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cancelButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface RandomGameProps {\r\n    handleStateChange: (newState: MainMenuState) => void;\r\n}\r\n\r\n\r\nfunction RandomGame(props: RandomGameProps) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const handleCancel = () => {\r\n        disconnectSocket();\r\n        props.handleStateChange(MainMenuState.LandingMenu);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGameID();\r\n    }, [])\r\n\r\n    const fetchGameID = () => {\r\n        // check if token exists, then make socket connection\r\n        const token = localStorage.getItem(process.env.REACT_APP_TOKEN_NAME!);\r\n        if (token) {\r\n            initiateSocket(token, undefined, afterSocketConnect);\r\n        } else {\r\n            getAnonymousToken()\r\n            .then( anonymousToken => {\r\n                initiateSocket(anonymousToken, undefined, afterSocketConnect);\r\n            })\r\n        }\r\n    }\r\n\r\n    const afterSocketConnect = () => {\r\n        console.log(\"Connected\")\r\n        subscribeToMatchSuccess(waitForMatch);\r\n    }\r\n\r\n    const waitForMatch = (matchSuccessData: MatchSuccessData) => {\r\n        const gameID = matchSuccessData.gameID;\r\n        history.push(`/play/${gameID}`);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.instructions}>\r\n                <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                    Finding a match...\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.instructions}>\r\n                    <CircularProgress />\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <Button\r\n                className={classes.cancelButton} \r\n                color=\"secondary\"\r\n                onClick={e => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomGame;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx",["109"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    GameStatus,\r\n    GameStatusData,\r\n    sendPlayerReady, \r\n    subscribeToGameStatus,\r\n} from '../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CircularProgress,\r\n    Divider,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    message: {\r\n\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface EndGameMenuProps {\r\n    message: string;\r\n    handleEndGameMenuOpen: (open: boolean) => void;\r\n}\r\n\r\n\r\nfunction EndGameMenu(props: EndGameMenuProps) {\r\n    const classes = useStyles();\r\n\r\n    const [waiting, setwaiting] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n    const handlePlayAgain = () => {\r\n        sendPlayerReady();\r\n        setwaiting(true);\r\n        setLoadingMessage(\"Waiting for other player...\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(waitForGame);\r\n    }, []);\r\n\r\nconst waitForGame = (data: GameStatusData) => {\r\n    if (data.status === GameStatus.Starting) {\r\n        setLoadingMessage(\"Starting...\");\r\n    }\r\n    if (data.status === GameStatus.InProgress) {\r\n        setwaiting(false);\r\n        props.handleEndGameMenuOpen(false);\r\n    }\r\n}\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <div className={classes.message}>\r\n                    <Typography variant='h5' align=\"center\" color=\"textSecondary\">\r\n                        {props.message}\r\n                    </Typography>\r\n                    <Typography align=\"center\" color=\"textSecondary\">\r\n                        Here's how you did:\r\n                    </Typography>\r\n                </div>\r\n                <Divider variant=\"middle\" />\r\n                {waiting &&\r\n                    <div>\r\n                        <Typography> {loadingMessage} </Typography>\r\n                        <CircularProgress />\r\n                    </div>\r\n                }\r\n                <div className={classes.button} >\r\n                    <Button color=\"secondary\" onClick={e => handlePlayAgain()}>\r\n                        Play Again\r\n                    </Button>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default EndGameMenu;",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":55,"column":8,"nodeType":"116","endLine":55,"endColumn":10,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"122","line":1,"column":27,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"123","line":4,"column":5,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"118","severity":1,"message":"124","line":5,"column":5,"nodeType":"120","messageId":"121","endLine":5,"endColumn":19},{"ruleId":"118","severity":1,"message":"125","line":6,"column":5,"nodeType":"120","messageId":"121","endLine":6,"endColumn":15},{"ruleId":"118","severity":1,"message":"126","line":7,"column":5,"nodeType":"120","messageId":"121","endLine":7,"endColumn":18},{"ruleId":"118","severity":1,"message":"127","line":11,"column":5,"nodeType":"120","messageId":"121","endLine":11,"endColumn":19},{"ruleId":"118","severity":1,"message":"128","line":12,"column":5,"nodeType":"120","messageId":"121","endLine":12,"endColumn":21},{"ruleId":"118","severity":1,"message":"129","line":13,"column":5,"nodeType":"120","messageId":"121","endLine":13,"endColumn":20},{"ruleId":"118","severity":1,"message":"130","line":18,"column":5,"nodeType":"120","messageId":"121","endLine":18,"endColumn":31},{"ruleId":"118","severity":1,"message":"131","line":19,"column":5,"nodeType":"120","messageId":"121","endLine":19,"endColumn":19},{"ruleId":"114","severity":1,"message":"132","line":23,"column":7,"nodeType":"116","endLine":23,"endColumn":41,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"134","line":6,"column":5,"nodeType":"120","messageId":"121","endLine":6,"endColumn":12},{"ruleId":"118","severity":1,"message":"135","line":7,"column":5,"nodeType":"120","messageId":"121","endLine":7,"endColumn":9},{"ruleId":"118","severity":1,"message":"136","line":8,"column":5,"nodeType":"120","messageId":"121","endLine":8,"endColumn":13},{"ruleId":"118","severity":1,"message":"137","line":9,"column":5,"nodeType":"120","messageId":"121","endLine":9,"endColumn":17},{"ruleId":"118","severity":1,"message":"138","line":10,"column":5,"nodeType":"120","messageId":"121","endLine":10,"endColumn":17},{"ruleId":"118","severity":1,"message":"123","line":5,"column":5,"nodeType":"120","messageId":"121","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"139","line":93,"column":8,"nodeType":"116","endLine":93,"endColumn":24,"suggestions":"140"},{"ruleId":"114","severity":1,"message":"141","line":54,"column":8,"nodeType":"116","endLine":54,"endColumn":10,"suggestions":"142"},{"ruleId":"114","severity":1,"message":"143","line":61,"column":8,"nodeType":"116","endLine":61,"endColumn":10,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'afterSocketConnect', 'gameID', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["147"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FormControl' is defined but never used.","'FormHelperText' is defined but never used.","'InputLabel' is defined but never used.","'OutlinedInput' is defined but never used.","'initiateSocket' is defined but never used.","'disconnectSocket' is defined but never used.","'sendPlayerReady' is defined but never used.","'subscribeToInitialPosition' is defined but never used.","'GameUpdateData' is defined but never used.","React Hook useEffect has missing dependencies: 'createView' and 'streetView'. Either include them or remove the dependency array.",["148"],"'Divider' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'fetchGameID'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'waitForGame'. Either include it or remove the dependency array.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [afterSocketConnect, gameID, history]",{"range":"162","text":"163"},"Update the dependencies array to be: [createView, props.streetViewOptions.position, streetView]",{"range":"164","text":"165"},"Update the dependencies array to be: [props.messages, scrollToBottom]",{"range":"166","text":"167"},"Update the dependencies array to be: [fetchGameID]",{"range":"168","text":"169"},"Update the dependencies array to be: [waitForGame]",{"range":"170","text":"171"},[1816,1818],"[afterSocketConnect, gameID, history]",[742,776],"[createView, props.streetViewOptions.position, streetView]",[2672,2688],"[props.messages, scrollToBottom]",[1407,1409],"[fetchGameID]",[1459,1461],"[waitForGame]"]