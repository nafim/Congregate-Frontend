[{"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx":"1","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx":"3","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx":"4","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx":"5","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx":"6","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx":"7","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx":"8","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx":"9","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx":"10","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx":"11","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx":"12","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx":"13","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\GameSocket.ts":"14","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\HTTPRequests.ts":"15","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\constants.ts":"16","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\Intro.tsx":"17","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\HowToPlay.tsx":"18","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\MainMenu.tsx":"19","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\LandingMenu.tsx":"20","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\RandomGame.tsx":"21","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\PrivateGame.tsx":"22","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\User.tsx":"23","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignIn.tsx":"24","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignedIn.tsx":"25","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\Username.tsx":"26","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\Leaderboard.tsx":"27","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\LeaderboardList.tsx":"28","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\theme.ts":"29","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\GameUI.tsx":"30"},{"size":756,"mtime":1612319715089,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":499162500000,"results":"33","hashOfConfig":"32"},{"size":813,"mtime":1611614029504,"results":"34","hashOfConfig":"32"},{"size":3283,"mtime":1612661343228,"results":"35","hashOfConfig":"32"},{"size":245,"mtime":1612289851941,"results":"36","hashOfConfig":"32"},{"size":6915,"mtime":1612661214685,"results":"37","hashOfConfig":"32"},{"size":2017,"mtime":1612392592681,"results":"38","hashOfConfig":"32"},{"size":3724,"mtime":1612661327469,"results":"39","hashOfConfig":"32"},{"size":4889,"mtime":1612377767646,"results":"40","hashOfConfig":"32"},{"size":2560,"mtime":1612378440900,"results":"41","hashOfConfig":"32"},{"size":4865,"mtime":1612123201684,"results":"42","hashOfConfig":"32"},{"size":3874,"mtime":1612405777078,"results":"43","hashOfConfig":"32"},{"size":6797,"mtime":1612481249612,"results":"44","hashOfConfig":"32"},{"size":6632,"mtime":1612661214573,"results":"45","hashOfConfig":"32"},{"size":5582,"mtime":1612661214573,"results":"46","hashOfConfig":"32"},{"size":200,"mtime":1612297605684,"results":"47","hashOfConfig":"32"},{"size":1308,"mtime":1612467797506,"results":"48","hashOfConfig":"32"},{"size":2095,"mtime":1612491155503,"results":"49","hashOfConfig":"32"},{"size":2063,"mtime":1612719855173,"results":"50","hashOfConfig":"32"},{"size":1789,"mtime":1612289648724,"results":"51","hashOfConfig":"32"},{"size":3339,"mtime":1612661214572,"results":"52","hashOfConfig":"32"},{"size":3087,"mtime":1612491939817,"results":"53","hashOfConfig":"32"},{"size":1700,"mtime":1612661214580,"results":"54","hashOfConfig":"32"},{"size":5959,"mtime":1612385217498,"results":"55","hashOfConfig":"32"},{"size":4944,"mtime":1612385587778,"results":"56","hashOfConfig":"32"},{"size":6148,"mtime":1612661214584,"results":"57","hashOfConfig":"32"},{"size":5364,"mtime":1612384945715,"results":"58","hashOfConfig":"32"},{"size":3247,"mtime":1612377147641,"results":"59","hashOfConfig":"32"},{"size":241,"mtime":1612406677381,"results":"60","hashOfConfig":"32"},{"size":4246,"mtime":1612405123019,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"tp3sg3",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx",[],["131","132"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx",["133"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx",["134"],"import React, { useState, useEffect, useRef} from 'react';\r\nimport {\r\n    Collapse,\r\n} from '@material-ui/core';\r\nimport {\r\n    subscribeToGameStatus,\r\n    GameStatusData,\r\n    GameStatus,\r\n    GamePosition,\r\n    sendGameUpdate,\r\n} from '../../api/GameSocket';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StreetView from './components/StreetView';\r\nimport EndGameMenu from './components/EndGameMenu';\r\nimport constants from '../../constants';\r\nimport GameUI from './components/GameUI';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        \"flex-flow\": \"column\",\r\n        height: \"100vh\",\r\n        width: \"100vw\"\r\n    },\r\n    endGame: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        zIndex: 2,\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n    content: {\r\n        height: \"100%\",\r\n        display: \"flex\"\r\n    }\r\n}));\r\n\r\ninterface GameProps{\r\n    initialPosition: GamePosition;\r\n    username: string;\r\n}\r\n\r\nfunction Game(props: GameProps) {\r\n    const classes = useStyles();\r\n\r\n    const [playerPosition, setPlayerPosition] = useState(props.initialPosition);\r\n    const [otherPlayerPosition, setOtherPlayerPosition] = useState(props.initialPosition);\r\n\r\n    const [endGameMessage, setEndGameMessage] = useState('');\r\n    const [endGameMenuOpen, setEndGameMenuOpen] = useState(false);\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState(constants.ROUND_TIMER);\r\n    const [gameDuration, setGameDuration] = useState(0);\r\n\r\n    const [prevScore, setPrevScore] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    // set up state ref so async socket callback func can access latest state\r\n    const stateRef = useRef<{score: number, timeRemaining: number}>({score: 0, timeRemaining: 0});\r\n    // array which keeps history of all past positions\r\n    const positionsRef = useRef<GamePosition[]>([]);\r\n\r\n    const handleEndGameMenuOpen = (open: boolean) => {\r\n        setEndGameMenuOpen(open);\r\n    }\r\n\r\n    // callback function called when player moves in streetview\r\n    const handlePositionChange = (newPosition: GamePosition) => {\r\n        console.log(\"Have handled game position change\");\r\n        sendGameUpdate({pos: newPosition});\r\n        \r\n        // if new position and last position aren't the same, add it to positions history\r\n        const lastPosition = positionsRef.current[positionsRef.current.length - 1];\r\n        if (newPosition.lat !== lastPosition.lat && newPosition.lng !== lastPosition.lng) {\r\n            positionsRef.current.push(newPosition);\r\n        }\r\n        console.log(positionsRef.current);\r\n    }\r\n\r\n    // bring player back to last position\r\n    const handleUndoPosition = () => {\r\n        console.log(positionsRef.current.length);\r\n        if (positionsRef.current.length > 1) {\r\n            positionsRef.current.pop();\r\n            setPlayerPosition(positionsRef.current[positionsRef.current.length - 1])\r\n        }\r\n    }\r\n\r\n    // when the round restarts, reset the positions history array\r\n    useEffect(() => {\r\n        positionsRef.current = [props.initialPosition];\r\n        setPlayerPosition(props.initialPosition);\r\n    }, [props.initialPosition])\r\n\r\n    // set up interval to calculate the time remaining\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            return setTimeRemaining(timeRemaining => {\r\n                if (timeRemaining > 0) {\r\n                    return timeRemaining - 1\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n        }, 1000);\r\n        return (() => clearInterval(interval))\r\n    }, [])\r\n\r\n    // set up state ref with latest state values\r\n    useEffect(() => {\r\n        stateRef.current = { timeRemaining, score };\r\n    },[timeRemaining, score])\r\n\r\n    // subscribe to game status changes\r\n    useEffect(() => {\r\n        subscribeToGameStatus(handleGameStatus);\r\n    },[])\r\n\r\n    const handleGameStatus = (gameStatusData: GameStatusData) => {\r\n        console.log(\"have received game status update\")\r\n        // handle game in progress stuff\r\n        if (gameStatusData.status === GameStatus.InProgress) {\r\n            // calculate game duration\r\n            setGameDuration(constants.ROUND_TIMER - stateRef.current.timeRemaining);\r\n        }\r\n        \r\n        // handle endgame\r\n        if (gameStatusData.status === GameStatus.Win) {\r\n            setEndGameMessage(\"You Won!\");\r\n            setEndGameMenuOpen(true);\r\n        }\r\n        if (gameStatusData.status === GameStatus.Loss) {\r\n            setEndGameMessage(\"Time's Up!\");\r\n            setEndGameMenuOpen(true);\r\n            // previous score is same current score\r\n            setPrevScore(stateRef.current.score);\r\n            // calculate game duration\r\n            setGameDuration(constants.ROUND_TIMER - gameStatusData.timeRemaining);\r\n        }\r\n        // synchornize the time remaining\r\n        if (Math.abs(gameStatusData.timeRemaining - stateRef.current.timeRemaining) > 1 ){\r\n            console.log('resyncrhonize time');\r\n            setTimeRemaining(gameStatusData.timeRemaining);\r\n        }\r\n        // set the score\r\n        if (gameStatusData.score !== stateRef.current.score) {\r\n            setPrevScore(stateRef.current.score);\r\n            setScore(gameStatusData.score);\r\n        }\r\n\r\n        // update the position of the other player\r\n        const otherPlayers = gameStatusData.players.filter(player => player.username !== props.username);\r\n        if (otherPlayers.length > 0) {\r\n            if (otherPlayers[0].pos) {\r\n                setOtherPlayerPosition(otherPlayers[0].pos);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <GameUI\r\n                username={props.username}\r\n                timeRemaining={timeRemaining}\r\n                score={score}\r\n                handleUndoPosition={handleUndoPosition}\r\n            />\r\n            <div className={classes.content}>\r\n                <div className={classes.endGame}>\r\n                    <Collapse in={endGameMenuOpen} unmountOnExit>\r\n                        <EndGameMenu \r\n                            message={endGameMessage}\r\n                            score={score}\r\n                            prevScore={prevScore}\r\n                            gameDuration={gameDuration}\r\n                            handleEndGameMenuOpen={handleEndGameMenuOpen}\r\n                        />\r\n                    </Collapse>\r\n                </div>\r\n                <StreetView\r\n                    apiKey={process.env.REACT_APP_MAPS_API_KEY!}\r\n                    position={playerPosition}\r\n                    markerPosition={otherPlayerPosition}\r\n                    onPositionChanged={handlePositionChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx",["135"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    IconButton,\r\n    Typography,\r\n    Drawer,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport MessageBox, { Message, Sender } from './MessageBox';\r\nimport ChatInput from './ChatInput';\r\nimport {\r\n    CurrentPlayersData,\r\n    MessageEventData,\r\n    PlayerConnectionData,\r\n    requestCurrentPlayers,\r\n    sendMessage,\r\n    subscribeToCurrentPlayers,\r\n    subscribeToMessage,\r\n    subscribeToPlayerConnect,\r\n    subscribeToPlayerDisconnect\r\n} from '../../../api/GameSocket';\r\n\r\nconst drawerWidth = 350;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n        width: \"100%\"\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: \"100%\",\r\n        },\r\n    },\r\n    chatHeader: {\r\n        display: \"flex\",\r\n        backgroundColor: theme.palette.primary.dark,\r\n        alignItems: \"center\",\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content below header to be below topBar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: \"center\"\r\n    }\r\n}));\r\n\r\ninterface ChatWindowProps {\r\n    chatOpen: boolean;\r\n    username: string;\r\n    handleChatToggle: () => void;\r\n    incrementChatUnread: () => void;\r\n}\r\n\r\nfunction ChatWindow(props: ChatWindowProps) {\r\n    const classes = useStyles();\r\n\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n\r\n    useEffect(() => {\r\n        subscribeToMessage(receiveMessage);\r\n        subscribeToCurrentPlayers(showCurrentPlayers, true);\r\n        requestCurrentPlayers();\r\n        subscribeToPlayerConnect(otherPlayerConnect);\r\n        subscribeToPlayerDisconnect(otherPlayerDisconnect);\r\n    },[])\r\n\r\n    const receiveMessage = (messageData: MessageEventData) => {\r\n        const newMessage = {\r\n            messageText: messageData.text,\r\n            name: messageData.name,\r\n            sender: Sender.Other\r\n        };\r\n        setMessages(messages => [...messages, newMessage]);\r\n        props.incrementChatUnread();\r\n    }\r\n\r\n    const showCurrentPlayers = (currentPlayers: CurrentPlayersData) => {\r\n        // copy array of players\r\n        const otherPlayers = [...currentPlayers.players];\r\n        // remove my username from the array once\r\n        const index = otherPlayers.indexOf(props.username);\r\n        if (index > -1) { otherPlayers.splice(index, 1) };\r\n\r\n        const newAlert = {\r\n            messageText: `You are in a game with ${otherPlayers}`,\r\n            name: '',\r\n            sender: Sender.Alert\r\n        };\r\n        setMessages(messages => [...messages, newAlert]);\r\n    }\r\n\r\n    const otherPlayerConnect = (connectionData: PlayerConnectionData) => {\r\n        const newAlert = {\r\n            messageText: `${connectionData.player} has connected`,\r\n            name: '',\r\n            sender: Sender.Alert\r\n        };\r\n        setMessages(messages => [...messages, newAlert]);\r\n        props.incrementChatUnread();\r\n    }\r\n\r\n    const otherPlayerDisconnect = (connectionData: PlayerConnectionData) => {\r\n        const newAlert = {\r\n            messageText: `${connectionData.player} has disconnected`,\r\n            name: '',\r\n            sender: Sender.Alert\r\n        };\r\n        setMessages(messages => [...messages, newAlert]);\r\n        props.incrementChatUnread();\r\n    }\r\n\r\n    const addMessage = (messageText: string) => {\r\n        if (!messageText) return;\r\n        const newMessage = {\r\n            messageText,\r\n            name: props.username,\r\n            sender: Sender.Me\r\n            \r\n        };\r\n        setMessages(messages => [...messages, newMessage]);\r\n        sendMessage(props.username, messageText);\r\n    }\r\n\r\n    return (\r\n        <nav aria-label=\"chat window\">\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.chatOpen}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.chatHeader}>\r\n                    <Typography style={{color: \"white\"}} variant='h6' align='center'> Chat </Typography>\r\n                    <IconButton onClick={props.handleChatToggle}>\r\n                        <ChevronRightIcon style={{color: 'white'}} />\r\n                    </IconButton>\r\n                </div>\r\n                <MessageBox\r\n                    messages={messages}\r\n                />\r\n                <ChatInput \r\n                    addMessage={addMessage}\r\n                    chatOpen={props.chatOpen}\r\n                />\r\n            </Drawer>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default ChatWindow;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx",["136"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ListChildComponentProps, VariableSizeList as MessageList } from 'react-window';\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: '2px solid rgba(0, 0, 0, 0.12)',\r\n        overflow: 'hidden',\r\n        padding: theme.spacing(2, 0, 0),\r\n        margin: theme.spacing(1, 1, 1),\r\n        height: \"100%\",\r\n    },\r\n    messageContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    messageContent: {\r\n        display: 'flex',\r\n        wordBreak: 'break-word',\r\n        flexDirection: 'column',\r\n        width: '65%',\r\n    }\r\n}));\r\n\r\nexport enum Sender {\r\n    Other='other',\r\n    Me='me',\r\n    Alert='alert'\r\n}\r\n\r\nfunction MessageRow({index, data, style}: ListChildComponentProps) {\r\n    const classes = useStyles();\r\n    const rowRef = useRef<HTMLDivElement>(null);\r\n    const message = data.messages[index];\r\n    \r\n    const showName = () => {\r\n        if (index === 0) return true; \r\n        const prevMessage = data.messages[index-1];\r\n        return (message.sender !== prevMessage.sender || message.user !== prevMessage.user)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowRef.current) {\r\n            data.setRowHeight(index, rowRef.current.clientHeight);\r\n        }\r\n        // eslint-disable-next-line\r\n        }, [rowRef]);\r\n\r\n    if (message.sender === Sender.Alert) {\r\n        return (\r\n            <div style={style}>\r\n                <div ref={rowRef} \r\n                className={classes.messageContainer} \r\n                style={{alignItems: \"center\"}}\r\n                >\r\n                    <div \r\n                        className={classes.messageContent}\r\n                    >\r\n                        <Typography\r\n                            variant='caption'\r\n                            color='textSecondary'\r\n                            align='center'\r\n                        > \r\n                            {message.messageText}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={style}>\r\n                <div ref={rowRef} \r\n                className={classes.messageContainer} \r\n                style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                >\r\n                    <div \r\n                        className={classes.messageContent}\r\n                        style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                    >\r\n                        {\r\n                            showName() &&\r\n                            <Typography variant='caption' color='textSecondary'> {message.name} </Typography>\r\n\r\n                        }\r\n                        <Typography variant='body1'> {message.messageText} </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport interface Message {\r\n    messageText: string;\r\n    name: string;\r\n    sender: Sender;\r\n}\r\n\r\ninterface MessageBoxProps {\r\n    messages: Message[];\r\n}\r\n\r\nfunction MessageBox(props: MessageBoxProps) {\r\n    const classes = useStyles();\r\n    // References\r\n    const listRef = useRef<MessageList>(null);\r\n    const rowHeights = useRef<{[index: number]: number}>({});\r\n\r\n    useEffect(() => {\r\n        if (props.messages.length > 0) {\r\n            if (listRef.current) {\r\n                scrollToBottom();\r\n            }\r\n        }\r\n    }, [props.messages]);\r\n\r\n    function setRowHeight(index: number, size: number) {\r\n        listRef.current!.resetAfterIndex(0);\r\n        rowHeights.current = { ...rowHeights.current, [index]: size };\r\n    }\r\n\r\n    function scrollToBottom() {\r\n        listRef.current!.scrollToItem(props.messages.length - 1, \"end\");\r\n    }\r\n\r\n    function getRowHeight(index: number) {\r\n        return rowHeights.current[index] + 8 || 82;\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <MessageList\r\n                    className=\"List\"\r\n                    height={height}\r\n                    itemCount={props.messages.length}\r\n                    itemSize={getRowHeight}\r\n                    ref={listRef}\r\n                    width={width}\r\n                    itemData={{messages: props.messages, setRowHeight}}\r\n                >\r\n                    {MessageRow}\r\n                </MessageList>\r\n                )}\r\n            </AutoSizer>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MessageBox;\r\n\r\n","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx",["137"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    GameStatus,\r\n    GameStatusData,\r\n    sendPlayerReady, \r\n    subscribeToGameStatus,\r\n} from '../../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CircularProgress,\r\n    Collapse,\r\n    Divider,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    message: {\r\n        margin: theme.spacing(0,5,2)\r\n    },\r\n    items: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface EndGameMenuProps {\r\n    message: string;\r\n    score: number;\r\n    prevScore: number;\r\n    gameDuration: number;\r\n    handleEndGameMenuOpen: (open: boolean) => void;\r\n}\r\n\r\nfunction EndGameMenu(props: EndGameMenuProps) {\r\n    const classes = useStyles();\r\n\r\n    const [waiting, setwaiting] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n    const handlePlayAgain = () => {\r\n        sendPlayerReady();\r\n        setwaiting(true);\r\n        setLoadingMessage(\"Waiting for other player...\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(waitForGame);\r\n    }, []);\r\n\r\nconst waitForGame = (data: GameStatusData) => {\r\n    if (data.status === GameStatus.Starting) {\r\n        setLoadingMessage(\"Starting...\");\r\n    }\r\n    if (data.status === GameStatus.InProgress) {\r\n        setwaiting(false);\r\n        props.handleEndGameMenuOpen(false);\r\n    }\r\n}\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <div className={classes.message}>\r\n                    <Typography variant='h4' align=\"center\" color=\"textPrimary\">\r\n                        {props.message}\r\n                    </Typography>\r\n                </div>\r\n                <Typography variant='h6' align=\"center\" color=\"textSecondary\">\r\n                        Results\r\n                </Typography>\r\n                <Divider className={classes.items} variant=\"middle\" />\r\n                <div className={classes.centered}>\r\n                    <div className={classes.items}>\r\n                        <Typography variant='subtitle1' color=\"textPrimary\">\r\n                        Total Score: <b> {props.score} (+{props.score - props.prevScore}) </b> <br />\r\n                        Round Duration: <b> {Math.round(props.gameDuration/60)}m {Math.round(props.gameDuration%60)}s </b> <br />\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                <Collapse in={waiting} unmountOnExit>\r\n                    <div className={classes.items}>\r\n                        <div className={classes.centered}>\r\n                            <Typography className={classes.items} color='textSecondary'>\r\n                                {loadingMessage} \r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.centered}>\r\n                            <CircularProgress className={classes.items} />\r\n                        </div>\r\n                    </div>\r\n                </Collapse>\r\n                <Collapse in={!waiting} unmountOnExit>\r\n                    <div className={classes.centered} >\r\n                        <Button\r\n                            className={classes.items}\r\n                            color=\"primary\"\r\n                            onClick={e => handlePlayAgain()}\r\n                        >\r\n                            Play Again\r\n                        </Button>\r\n                    </div>\r\n                </Collapse>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default EndGameMenu;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx",["138"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    CircularProgress,\r\n    FormControl,\r\n    FormHelperText,\r\n    IconButton,\r\n    InputAdornment,\r\n    OutlinedInput,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getUserToken, register } from '../../api/HTTPRequests';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useSnackbar } from 'notistack';\r\nimport constants from '../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    menuContainer: {\r\n        border: '2px solid rgba(0, 0, 0, 0.12)',\r\n        padding: theme.spacing(2,2,0),\r\n        display: 'inline-flex',\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    introTitle: {\r\n        color: theme.palette.primary.dark,\r\n        \"font-family\": \"Arial, cursive\",\r\n        \"font-size\": \"4.7rem\",\r\n        \"text-align\": \"center\",\r\n        marginBottom: theme.spacing(8)\r\n    },\r\n    item: {\r\n        margin: theme.spacing(0, 0, 2)\r\n    }\r\n}));\r\n\r\nfunction Intro() {\r\n    const classes = useStyles();\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const history = useHistory();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [promptUsername, setPromptUsername] = useState(false);\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [usernameError, setUsernameError] = useState(false);\r\n    const [usernameErrorText, setUsernameErrorText] = useState(\"\");\r\n\r\n    const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUsername(event.target.value);\r\n        setUsernameError(false);\r\n        setUsernameErrorText(\"\");\r\n    }\r\n\r\n    const isValidUsername = () => {\r\n        if (!username) {\r\n            setUsernameError(true);\r\n            setUsernameErrorText(\"Please enter a username\")\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const handleEnterUsername = () => {\r\n        if (isValidUsername()) {\r\n            register(username, query.get(\"key\")!)\r\n            .then(data => {\r\n                if (data.errors) {\r\n                    if (data.errors.length > 0) {\r\n                        const error = data.errors[0];\r\n                        if (error.param === 'username') {\r\n                            setUsernameError(true);\r\n                            setUsernameErrorText(error.msg);\r\n                        } else {\r\n                            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                                variant: 'error',\r\n                            })\r\n                        }\r\n                    }\r\n                } else {\r\n                    history.push('/');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                    variant: 'error',\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if theres no query key, then \r\n        if (!query.get(\"key\")) {\r\n            return history.push('/');\r\n        }\r\n        getUserToken(query.get(\"key\")!)\r\n        .then(data => {\r\n            if (data.error) {\r\n                // if there is an error it has to be invalid key, so just reroute home\r\n                return history.push('/');\r\n            }\r\n            if (data.registered) {\r\n                return history.push('/');\r\n            } else {\r\n                setPromptUsername(true);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                variant: 'error',\r\n            })\r\n        })\r\n    },[])\r\n\r\n    return (\r\n        <div className={classes.heroContent}>\r\n            <div>\r\n                <Typography className={classes.introTitle}>{process.env.REACT_APP_WEBSITE_NAME!}</Typography>\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <div className={classes.menuContainer}>\r\n                    {!promptUsername &&\r\n                        <div>\r\n                            <div className={classes.centered}>\r\n                                <Typography className={classes.item} color='textSecondary'>\r\n                                    Verifying ...\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.centered}>\r\n                                <CircularProgress className={classes.item} />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {promptUsername &&\r\n                        <div>\r\n                            <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                                Create your username:\r\n                            </Typography>\r\n                            <form className={classes.item} noValidate autoComplete=\"off\" onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                handleEnterUsername();\r\n                            }}>\r\n                                <FormControl error={usernameError}>\r\n                                    <OutlinedInput\r\n                                        id=\"gameID\"\r\n                                        type='text'\r\n                                        placeholder='Username'\r\n                                        value={username}\r\n                                        onChange={handleUsernameChange}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                aria-label=\"submit login info\"\r\n                                                edge=\"end\"\r\n                                                onClick={handleEnterUsername}\r\n                                                >\r\n                                                    <ArrowForward />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                    <FormHelperText id=\"username-error-text\">{usernameErrorText}</FormHelperText>\r\n                                </FormControl>\r\n                            </form>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Intro;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\GameSocket.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\HTTPRequests.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\constants.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\Intro.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\HowToPlay.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\MainMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\LandingMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\RandomGame.tsx",["139"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    initiateSocket,\r\n    disconnectSocket,\r\n    subscribeToConnectErrors,\r\n    subscribeToMatchSuccess,\r\n    MatchSuccessData,\r\n    ErrorData,\r\n} from '../../../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { grabAndVerifyToken } from '../../../../api/HTTPRequests';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MainMenuState } from './MainMenu';\r\nimport { useSnackbar } from 'notistack';\r\nimport constants from '../../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    instructions: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cancelButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface RandomGameProps {\r\n    handleStateChange: (newState: MainMenuState) => void;\r\n}\r\n\r\n\r\nfunction RandomGame(props: RandomGameProps) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const handleCancel = () => {\r\n        disconnectSocket();\r\n        props.handleStateChange(MainMenuState.LandingMenu);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGameID();\r\n    }, [])\r\n\r\n    const fetchGameID = () => {\r\n        // check if token exists, then make socket connection\r\n        grabAndVerifyToken()\r\n        .then(token => {\r\n            initiateSocket(token, undefined, afterSocketConnect);\r\n            subscribeToConnectErrors(authenticationError);\r\n        })\r\n        .catch(error => {\r\n            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                variant: 'error',\r\n            })\r\n        })\r\n    }\r\n\r\n    const afterSocketConnect = () => {\r\n        console.log(\"Connected\")\r\n        subscribeToMatchSuccess(waitForMatch);\r\n    }\r\n\r\n    const waitForMatch = (matchSuccessData: MatchSuccessData) => {\r\n        const gameID = matchSuccessData.gameID;\r\n        disconnectSocket();\r\n        history.push(`/play/${gameID}`);\r\n    }\r\n\r\n    // if auth error, delete the token, get another token\r\n    const authenticationError = (data: ErrorData) => {\r\n        localStorage.removeItem(process.env.REACT_APP_TOKEN_NAME!);\r\n        grabAndVerifyToken();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.instructions}>\r\n                <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                    Finding a match...\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.instructions}>\r\n                    <CircularProgress />\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <Button\r\n                className={classes.cancelButton} \r\n                color=\"secondary\"\r\n                onClick={e => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomGame;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\PrivateGame.tsx",["140"],"import React, { useState, useEffect } from 'react';\r\nimport { Link as RouterLink} from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Link,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { getGameID } from '../../../../api/HTTPRequests';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MainMenuState } from './MainMenu';\r\nimport { useSnackbar } from 'notistack';\r\nimport constants from '../../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    instructions: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cancelButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface PrivateGameProps {\r\n    handleStateChange: (newState: MainMenuState) => void;\r\n}\r\n\r\n\r\nfunction PrivateGame(props: PrivateGameProps) {\r\n    const classes = useStyles();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [gameID, setGameID] = useState(\"\");\r\n\r\n    const handleCancel = () => {\r\n        props.handleStateChange(MainMenuState.LandingMenu);\r\n    }\r\n\r\n    const fetchGameID = () => {\r\n        getGameID()\r\n        .then(data => {\r\n            if (data.error) {\r\n                enqueueSnackbar(data.error, { \r\n                    variant: 'error',\r\n                })\r\n            }\r\n            if (data.gameID) {\r\n                setGameID(data.gameID);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                variant: 'error',\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGameID();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.instructions}>\r\n                <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                    Join the game using the following link:\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.instructions}>\r\n                {gameID && \r\n                    <Typography variant='h5' align='center' color='textPrimary'>\r\n                            <Link component={RouterLink} to={`/play/${gameID}`}>\r\n                                {`${process.env.REACT_APP_WEBSITE_DOMAIN}/play/${gameID}`}\r\n                            </Link>\r\n                    </Typography>\r\n                }\r\n                {!gameID &&\r\n                    <CircularProgress />\r\n                }\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <Button\r\n                className={classes.cancelButton} \r\n                color=\"secondary\"\r\n                onClick={e => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrivateGame;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\User.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignIn.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignedIn.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\Username.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\Leaderboard.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\LeaderboardList.tsx",["141"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ListChildComponentProps, VariableSizeList as EntryList } from 'react-window';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    entryContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n    entryContent: {\r\n        margin: theme.spacing(2,2,2),\r\n        wordBreak: 'break-word',\r\n    }\r\n}));\r\n\r\nfunction EntryRow({index, data, style}: ListChildComponentProps) {\r\n    const classes = useStyles();\r\n    const rowRef = useRef<HTMLDivElement>(null);\r\n    const entry = data.entries[index];\r\n    \r\n\r\n    useEffect(() => {\r\n        if (rowRef.current) {\r\n            data.setRowHeight(index, rowRef.current.clientHeight);\r\n        }\r\n        // eslint-disable-next-line\r\n        }, [rowRef]);\r\n    return (\r\n        <div style={style}>\r\n            <div ref={rowRef} \r\n                className={classes.entryContainer}\r\n                style={index % 2 === 0 ? {backgroundColor: 'rgba(0, 0, 0, 0.04)'} : {}}\r\n            >\r\n                <div style={{width: '20%'}}>\r\n                    <Typography\r\n                        variant='body1'\r\n                        className={classes.entryContent}\r\n                    >\r\n                        {index + 1}\r\n                    </Typography>\r\n                </div>\r\n                <div style={{width: '40%'}}>\r\n                    <Typography\r\n                        variant='body1'\r\n                        className={classes.entryContent}\r\n                    >\r\n                        {entry.username}\r\n                    </Typography>\r\n                </div>\r\n                <div style={{width: '40%'}}>\r\n                    <Typography\r\n                        variant='body1'\r\n                        className={classes.entryContent}\r\n                        align='center'\r\n                    >\r\n                        {entry.score.toFixed(0)}\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport interface Entry {\r\n    username: string;\r\n    score: string;\r\n}\r\n\r\ninterface LeaderboardListProps {\r\n    entries: Entry[];\r\n}\r\n\r\nfunction LeaderboardList(props: LeaderboardListProps) {\r\n    const classes = useStyles();\r\n    // References\r\n    const listRef = useRef<EntryList>(null);\r\n    const rowHeights = useRef<{[index: number]: number}>({});\r\n\r\n    function setRowHeight(index: number, size: number) {\r\n        listRef.current!.resetAfterIndex(0);\r\n        rowHeights.current = { ...rowHeights.current, [index]: size };\r\n    }\r\n\r\n    function getRowHeight(index: number) {\r\n        return rowHeights.current[index] || 40;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n                <EntryList\r\n                className=\"List\"\r\n                height={560}\r\n                itemCount={props.entries.length}\r\n                itemSize={getRowHeight}\r\n                ref={listRef}\r\n                width='100%'\r\n                itemData={{entries: props.entries, setRowHeight}}\r\n            >\r\n                {EntryRow}\r\n            </EntryList>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default LeaderboardList;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\theme.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\GameUI.tsx",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":58,"column":8,"nodeType":"148","endLine":58,"endColumn":10,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":51,"column":33,"nodeType":"152","messageId":"153","endLine":51,"endColumn":55},{"ruleId":"146","severity":1,"message":"154","line":70,"column":7,"nodeType":"148","endLine":70,"endColumn":9,"suggestions":"155"},{"ruleId":"146","severity":1,"message":"156","line":122,"column":8,"nodeType":"148","endLine":122,"endColumn":24,"suggestions":"157"},{"ruleId":"146","severity":1,"message":"158","line":59,"column":8,"nodeType":"148","endLine":59,"endColumn":10,"suggestions":"159"},{"ruleId":"146","severity":1,"message":"160","line":122,"column":7,"nodeType":"148","endLine":122,"endColumn":9,"suggestions":"161"},{"ruleId":"146","severity":1,"message":"162","line":59,"column":8,"nodeType":"148","endLine":59,"endColumn":10,"suggestions":"163"},{"ruleId":"146","severity":1,"message":"162","line":71,"column":8,"nodeType":"148","endLine":71,"endColumn":10,"suggestions":"164"},{"ruleId":"150","severity":1,"message":"165","line":77,"column":11,"nodeType":"152","messageId":"153","endLine":77,"endColumn":18},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'afterSocketConnect', 'enqueueSnackbar', 'gameID', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["168"],"@typescript-eslint/no-unused-vars","'setOtherPlayerPosition' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'otherPlayerConnect', 'otherPlayerDisconnect', 'receiveMessage', and 'showCurrentPlayers'. Either include them or remove the dependency array.",["169"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'waitForGame'. Either include it or remove the dependency array.",["171"],"React Hook useEffect has missing dependencies: 'enqueueSnackbar', 'history', and 'query'. Either include them or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'fetchGameID'. Either include it or remove the dependency array.",["173"],["174"],"'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"185","fix":"187"},"Update the dependencies array to be: [afterSocketConnect, enqueueSnackbar, gameID, history]",{"range":"188","text":"189"},"Update the dependencies array to be: [otherPlayerConnect, otherPlayerDisconnect, receiveMessage, showCurrentPlayers]",{"range":"190","text":"191"},"Update the dependencies array to be: [props.messages, scrollToBottom]",{"range":"192","text":"193"},"Update the dependencies array to be: [waitForGame]",{"range":"194","text":"195"},"Update the dependencies array to be: [enqueueSnackbar, history, query]",{"range":"196","text":"197"},"Update the dependencies array to be: [fetchGameID]",{"range":"198","text":"199"},{"range":"200","text":"199"},[1855,1857],"[afterSocketConnect, enqueueSnackbar, gameID, history]",[1961,1963],"[otherPlayerConnect, otherPlayerDisconnect, receiveMessage, showCurrentPlayers]",[3764,3780],"[props.messages, scrollToBottom]",[1384,1386],"[waitForGame]",[3844,3846],"[enqueueSnackbar, history, query]",[1605,1607],"[fetchGameID]",[1906,1908]]