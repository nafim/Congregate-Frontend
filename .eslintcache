[{"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx":"1","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx":"3","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx":"4","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx":"5","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro.tsx":"6","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\MainMenu.tsx":"7","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\LandingMenu.tsx":"8","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx":"9","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx":"10","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\PrivateGame.tsx":"11","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx":"12","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx":"13","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx":"14","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx":"15","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\GameSocket.ts":"16","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\HTTPRequests.ts":"17","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\RandomGame.tsx":"18","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx":"19","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\User.tsx":"20","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\SignIn.tsx":"21","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx":"22","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\game_settings.ts":"23","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\HowToPlay.tsx":"24","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\SignedIn.tsx":"25"},{"size":500,"mtime":1610837147249,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":813,"mtime":1611614029504,"results":"29","hashOfConfig":"27"},{"size":2514,"mtime":1611776868606,"results":"30","hashOfConfig":"27"},{"size":156,"mtime":1611870988193,"results":"31","hashOfConfig":"27"},{"size":1262,"mtime":1611950923403,"results":"32","hashOfConfig":"27"},{"size":2024,"mtime":1611349285824,"results":"33","hashOfConfig":"27"},{"size":1725,"mtime":1611948587548,"results":"34","hashOfConfig":"27"},{"size":7567,"mtime":1611865493756,"results":"35","hashOfConfig":"27"},{"size":2051,"mtime":1611606438142,"results":"36","hashOfConfig":"27"},{"size":2689,"mtime":1611348989709,"results":"37","hashOfConfig":"27"},{"size":1741,"mtime":1611695309430,"results":"38","hashOfConfig":"27"},{"size":3017,"mtime":1611793037508,"results":"39","hashOfConfig":"27"},{"size":2237,"mtime":1611605065526,"results":"40","hashOfConfig":"27"},{"size":4073,"mtime":1611793012792,"results":"41","hashOfConfig":"27"},{"size":3631,"mtime":1611775633294,"results":"42","hashOfConfig":"27"},{"size":2775,"mtime":1611950749681,"results":"43","hashOfConfig":"27"},{"size":2930,"mtime":1611776514411,"results":"44","hashOfConfig":"27"},{"size":3813,"mtime":1611863703948,"results":"45","hashOfConfig":"27"},{"size":1050,"mtime":1611951400686,"results":"46","hashOfConfig":"27"},{"size":4541,"mtime":1611688253778,"results":"47","hashOfConfig":"27"},{"size":5691,"mtime":1611950824473,"results":"48","hashOfConfig":"27"},{"size":137,"mtime":1611778122833,"results":"49","hashOfConfig":"27"},{"size":2011,"mtime":1611869677021,"results":"50","hashOfConfig":"27"},{"size":4692,"mtime":1611951514158,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"tp3sg3",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx",[],["109","110"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx",["111"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    initiateSocket,\r\n    sendPlayerReady,\r\n    subscribeToGameStatus,\r\n    GameStatusData,\r\n    GameStatus,\r\n    subscribeToInitialPosition,\r\n    GameUpdateData,\r\n    requestGameStatus,\r\n} from '../api/GameSocket';\r\nimport { getAnonymousToken } from '../api/HTTPRequests';\r\nimport {\r\n    useParams,\r\n    useHistory,\r\n} from \"react-router-dom\";\r\nimport Game from './Game';\r\nimport Loading from './Loading';\r\n\r\ninterface PlayParams {\r\n    gameID: string;\r\n}\r\n\r\nfunction Play() {\r\n    const { gameID } = useParams<PlayParams>();\r\n\r\n    const history = useHistory();\r\n\r\n    // set the states\r\n    const [ready, setReady] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"Waiting for other player...\");\r\n    const [initialPosition, setInitialPosition] = useState({lat: 42.345573, lng: -71.098326});\r\n\r\n    // logic for connecting to the game\r\n    useEffect(() => {\r\n        // if no gameID, then redirect home\r\n        if (!gameID) return history.push('/');\r\n        // get a token if one doesn't already exist, then connect to socket\r\n        const token = localStorage.getItem(process.env.REACT_APP_TOKEN_NAME!);\r\n        if (token) {\r\n            initiateSocket(token, gameID, afterSocketConnect);\r\n        } else {\r\n            getAnonymousToken()\r\n            .then( data => {\r\n                initiateSocket(data.token, gameID, afterSocketConnect);\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const afterSocketConnect = () => {\r\n        console.log(\"Connected\")\r\n        subscribeToInitialPosition(startingGame);\r\n        sendPlayerReady();\r\n        subscribeToGameStatus(waitForGame);\r\n        requestGameStatus();\r\n    }\r\n\r\n    const waitForGame = (data: GameStatusData) => {\r\n        if (data.status === GameStatus.InLobby) {\r\n            \r\n        } else {\r\n            setLoadingMessage(\"Starting...\");\r\n        }\r\n    }\r\n\r\n    const startingGame = (initialPositionData: GameUpdateData) => {\r\n        console.log(\"This is the new initial position\");\r\n        console.log(initialPositionData.pos);\r\n        setInitialPosition(initialPositionData.pos)\r\n        if (!ready) {\r\n            setReady(true);\r\n        }\r\n    }\r\n\r\n\r\n    if (ready) {\r\n        return (\r\n            <Game\r\n                position={initialPosition}\r\n            />\r\n        );\r\n    } else {\r\n        return (\r\n            <Loading\r\n                loadingMessage={loadingMessage}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Play;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\MainMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\LandingMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx",["112","113"],"import React, { useState, useEffect} from 'react';\r\nimport clsx from 'clsx';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Fade,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport {\r\n    disconnectSocket,\r\n    subscribeToGameStatus,\r\n    GameStatusData,\r\n    GameStatus,\r\n    GamePosition,\r\n    GameUpdateData,\r\n    sendGameUpdate,\r\n} from '../api/GameSocket';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StreetView from './components/StreetView';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport EndGameMenu from './components/EndGameMenu';\r\nimport game_settings from '../../game_settings';\r\n\r\nconst drawerWidth = 350;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        \"flex-flow\": \"column\",\r\n        height: \"100vh\",\r\n        width: \"100vw\"\r\n    },\r\n    topBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    topBarShift: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginRight: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            })\r\n        }\r\n    },\r\n    chatButton: {\r\n        marginRight: theme.spacing(1),\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    endGame: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        zIndex: 2,\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n    content: {\r\n        height: \"100%\",\r\n        display: \"flex\"\r\n    }\r\n}));\r\n\r\ninterface GameProps{\r\n    position: GamePosition;\r\n}\r\n\r\nfunction Game(props: GameProps) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const [endGameMessage, setEndGameMessage] = useState('');\r\n    const [endGameMenuOpen, setEndGameMenuOpen] = useState(false);\r\n    const [timeRemaining, setTimeRemaining] = useState(game_settings.ROUND_TIMER);\r\n    const [prevScore, setPrevScore] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [gameDuration, setGameDuration] = useState(0);\r\n\r\n    const handleChatToggle = () => {\r\n        setChatOpen(!chatOpen);\r\n    }\r\n\r\n    const handleExit = () => {\r\n        disconnectSocket();\r\n        history.push('/');\r\n    }\r\n\r\n    const handleEndGameMenuOpen = (open: boolean) => {\r\n        setEndGameMenuOpen(open);\r\n    }\r\n\r\n    const handlePositionChange = (newPosition: GamePosition) => {\r\n        console.log(\"Have handled game position change\");\r\n        sendGameUpdate({pos: newPosition});\r\n    }\r\n\r\n    const showTimer = () => {\r\n        const minutes = Math.floor(timeRemaining/60);\r\n        let seconds = Math.floor(timeRemaining % 60);\r\n        let secondString;\r\n        if (seconds < 10) {\r\n            secondString = \"0\" + seconds;\r\n        } else {\r\n            secondString = String(seconds);\r\n        }\r\n        \r\n        return (`${minutes}:${secondString}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            return setTimeRemaining(timeRemaining => {\r\n                if (timeRemaining > 0) {\r\n                    return timeRemaining - 1\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n        }, 1000);\r\n        return (() => clearInterval(interval))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(handleGameStatus);\r\n    },[])\r\n\r\n    const handleGameStatus = (gameStatusData: GameStatusData) => {\r\n        console.log(\"have received game status update\")\r\n        // handle endgame\r\n        if (gameStatusData.status === GameStatus.Win) {\r\n            setEndGameMessage(\"You Won!\");\r\n            setEndGameMenuOpen(true);\r\n            // calculate game duration\r\n            setGameDuration(game_settings.ROUND_TIMER - gameStatusData.timeRemaining);\r\n        }\r\n        if (gameStatusData.status === GameStatus.Loss) {\r\n            setEndGameMessage(\"Time's Up!\");\r\n            setEndGameMenuOpen(true);\r\n            // calculate game duration\r\n            setGameDuration(game_settings.ROUND_TIMER - gameStatusData.timeRemaining);\r\n        }\r\n        // synchornize the time remaining\r\n        if (Math.abs(gameStatusData.timeRemaining - timeRemaining) > 1 ){\r\n            console.log('resyncrhonize time');\r\n            setTimeRemaining(gameStatusData.timeRemaining);\r\n        }\r\n        // set the score\r\n        if (gameStatusData.score !== score) {\r\n            setPrevScore(score);\r\n            setScore(gameStatusData.score);\r\n        }\r\n    }\r\n\r\n    const streetViewOptions = {\r\n        position: props.position,\r\n        pov: { heading: 165, pitch: 0 },\r\n        motionTracking: false,\r\n        motionTrackingControl: false,\r\n        addressControl: false,\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={clsx(classes.topBar, {[classes.topBarShift]: chatOpen,})}>\r\n                <AppBar style={{backgroundColor: \"#4a4a50\"}} position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Score: {score}\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Time Remaining: {showTimer()}\r\n                        </Typography>\r\n                        <Button \r\n                            color=\"inherit\"\r\n                            onClick={e => handleExit()}\r\n                        >\r\n                            Exit\r\n                        </Button>\r\n                        <IconButton edge=\"start\" className={classes.chatButton} color=\"inherit\" aria-label=\"chat\"\r\n                            onClick={handleChatToggle}\r\n                        >\r\n                            <ChatIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <ChatWindow\r\n                    chatOpen={chatOpen}\r\n                    handleChatToggle={handleChatToggle}\r\n                />\r\n            </div>\r\n            <div className={classes.content}>\r\n                <div className={classes.endGame}>\r\n                    {\r\n                        endGameMenuOpen &&\r\n                        <Fade in={endGameMenuOpen}>\r\n                        <EndGameMenu \r\n                            message={endGameMessage}\r\n                            score={score}\r\n                            prevScore={prevScore}\r\n                            gameDuration={gameDuration}\r\n                            handleEndGameMenuOpen={handleEndGameMenuOpen}\r\n                        />\r\n                        </Fade>\r\n                    }\r\n                </div>\r\n                <StreetView\r\n                    apiKey={process.env.REACT_APP_MAPS_API_KEY!}\r\n                    streetViewOptions={streetViewOptions}\r\n                    onPositionChanged={handlePositionChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\PrivateGame.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx",["114","115"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport { Loader } from \"@googlemaps/js-api-loader\";\r\n\r\ninterface StreetViewProps {\r\n    apiKey: string;\r\n    streetViewOptions: google.maps.StreetViewPanoramaOptions;\r\n    onPositionChanged: (position: google.maps.LatLngLiteral) => void;\r\n};\r\n\r\nfunction StreetView(props: StreetViewProps) {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const loader = new Loader({\r\n        apiKey: props.apiKey,\r\n        version: \"weekly\"\r\n    })\r\n    const [streetView, setStreetView] = useState<google.maps.StreetViewPanorama>();\r\n\r\n    useEffect(() => {\r\n        createView(ref);\r\n        if (streetView) {\r\n            streetView!.addListener('position_changed', () => {\r\n                props.onPositionChanged(streetView!.getPosition().toJSON());\r\n            })\r\n            return () => {\r\n                google.maps.event.clearInstanceListeners(streetView!);\r\n            }\r\n        }\r\n    },[streetView])\r\n\r\n    // if streetView has been created, then upon position change, update streetView\r\n    useEffect(() => {\r\n        if (streetView) {\r\n            streetView.setPosition(props.streetViewOptions.position!);\r\n        }\r\n    }, [props.streetViewOptions.position])\r\n\r\n    const createView = (ref: React.RefObject<HTMLDivElement>) => {\r\n        if (!streetView) {\r\n            loader\r\n            .load()\r\n            .then(() => {\r\n                setStreetView(new google.maps.StreetViewPanorama(ref.current!, props.streetViewOptions));\r\n            })\r\n            .catch(e => {\r\n                console.error(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '100%', width: \"100%\" }} ref={ref}/>\r\n    );\r\n\r\n}\r\n\r\nexport default StreetView;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx",["116"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ListChildComponentProps, VariableSizeList as MessageList } from 'react-window';\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: '2px solid rgba(0, 0, 0, 0.12)',\r\n        overflow: 'hidden',\r\n        padding: theme.spacing(2, 0, 0),\r\n        margin: theme.spacing(1, 1, 1),\r\n        height: \"100%\",\r\n    },\r\n    messageContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    messageContent: {\r\n        display: 'flex',\r\n        wordBreak: 'break-word',\r\n        flexDirection: 'column',\r\n        width: '65%',\r\n    }\r\n}));\r\n\r\nexport enum Sender {\r\n    Other='other',\r\n    Me='me'\r\n}\r\n\r\nfunction MessageRow({index, data, style}: ListChildComponentProps) {\r\n    const classes = useStyles();\r\n    const rowRef = useRef<HTMLDivElement>(null);\r\n    const message = data.messages[index];\r\n    \r\n    const showName = () => {\r\n        if (index === 0) return true; \r\n        const prevMessage = data.messages[index-1];\r\n        return (message.sender !== prevMessage.sender || message.user !== prevMessage.user)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowRef.current) {\r\n            data.setRowHeight(index, rowRef.current.clientHeight);\r\n        }\r\n        // eslint-disable-next-line\r\n        }, [rowRef]);\r\n\r\n    return (\r\n            <div style={style}>\r\n                <div ref={rowRef} \r\n                className={classes.messageContainer} \r\n                style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                >\r\n                    <div \r\n                        className={classes.messageContent}\r\n                        style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                    >\r\n                        {\r\n                            showName() &&\r\n                            <Typography variant='caption' color='textSecondary'> {message.name} </Typography>\r\n\r\n                        }\r\n                        <Typography variant='body1'> {message.messageText} </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport interface Message {\r\n    messageText: string;\r\n    name: string;\r\n    sender: Sender;\r\n}\r\n\r\ninterface MessageBoxProps {\r\n    messages: Message[];\r\n}\r\n\r\nfunction MessageBox(props: MessageBoxProps) {\r\n    const classes = useStyles();\r\n    // References\r\n    const listRef = useRef<MessageList>(null);\r\n    const rowHeights = useRef<{[index: number]: number}>({});\r\n\r\n    useEffect(() => {\r\n        if (props.messages.length > 0) {\r\n            if (listRef.current) {\r\n                scrollToBottom();\r\n            }\r\n        }\r\n    }, [props.messages]);\r\n\r\n    function setRowHeight(index: number, size: number) {\r\n        listRef.current!.resetAfterIndex(0);\r\n        rowHeights.current = { ...rowHeights.current, [index]: size };\r\n    }\r\n\r\n    function scrollToBottom() {\r\n        listRef.current!.scrollToItem(props.messages.length - 1, \"end\");\r\n    }\r\n\r\n    function getRowHeight(index: number) {\r\n        return rowHeights.current[index] + 8 || 82;\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <MessageList\r\n                    className=\"List\"\r\n                    height={height}\r\n                    itemCount={props.messages.length}\r\n                    itemSize={getRowHeight}\r\n                    ref={listRef}\r\n                    width={width}\r\n                    itemData={{messages: props.messages, setRowHeight}}\r\n                >\r\n                    {MessageRow}\r\n                </MessageList>\r\n                )}\r\n            </AutoSizer>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MessageBox;\r\n\r\n","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\GameSocket.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\HTTPRequests.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\RandomGame.tsx",["117"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    initiateSocket,\r\n    disconnectSocket,\r\n    subscribeToMatchSuccess,\r\n    MatchSuccessData,\r\n} from '../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { getAnonymousToken } from '../../api/HTTPRequests';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MainMenuState } from './MainMenu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    instructions: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cancelButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface RandomGameProps {\r\n    handleStateChange: (newState: MainMenuState) => void;\r\n}\r\n\r\n\r\nfunction RandomGame(props: RandomGameProps) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const handleCancel = () => {\r\n        disconnectSocket();\r\n        props.handleStateChange(MainMenuState.LandingMenu);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGameID();\r\n    }, [])\r\n\r\n    const fetchGameID = () => {\r\n        // check if token exists, then make socket connection\r\n        const token = localStorage.getItem(process.env.REACT_APP_TOKEN_NAME!);\r\n        if (token) {\r\n            initiateSocket(token, undefined, afterSocketConnect);\r\n        } else {\r\n            getAnonymousToken()\r\n            .then( data => {\r\n                initiateSocket(data.token, undefined, afterSocketConnect);\r\n            })\r\n        }\r\n    }\r\n\r\n    const afterSocketConnect = () => {\r\n        console.log(\"Connected\")\r\n        subscribeToMatchSuccess(waitForMatch);\r\n    }\r\n\r\n    const waitForMatch = (matchSuccessData: MatchSuccessData) => {\r\n        const gameID = matchSuccessData.gameID;\r\n        disconnectSocket();\r\n        history.push(`/play/${gameID}`);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.instructions}>\r\n                <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                    Finding a match...\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.instructions}>\r\n                    <CircularProgress />\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <Button\r\n                className={classes.cancelButton} \r\n                color=\"secondary\"\r\n                onClick={e => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomGame;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx",["118"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    GameStatus,\r\n    GameStatusData,\r\n    sendPlayerReady, \r\n    subscribeToGameStatus,\r\n} from '../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CircularProgress,\r\n    Divider,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    message: {\r\n        margin: theme.spacing(0,5,2)\r\n    },\r\n    items: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface EndGameMenuProps {\r\n    message: string;\r\n    score: number;\r\n    prevScore: number;\r\n    gameDuration: number;\r\n    handleEndGameMenuOpen: (open: boolean) => void;\r\n}\r\n\r\nfunction EndGameMenu(props: EndGameMenuProps) {\r\n    const classes = useStyles();\r\n\r\n    const [waiting, setwaiting] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n    const handlePlayAgain = () => {\r\n        sendPlayerReady();\r\n        setwaiting(true);\r\n        setLoadingMessage(\"Waiting for other player...\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(waitForGame);\r\n    }, []);\r\n\r\nconst waitForGame = (data: GameStatusData) => {\r\n    if (data.status === GameStatus.Starting) {\r\n        setLoadingMessage(\"Starting...\");\r\n    }\r\n    if (data.status === GameStatus.InProgress) {\r\n        setwaiting(false);\r\n        props.handleEndGameMenuOpen(false);\r\n    }\r\n}\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <div className={classes.message}>\r\n                    <Typography variant='h4' align=\"center\" color=\"textPrimary\">\r\n                        {props.message}\r\n                    </Typography>\r\n                </div>\r\n                <Typography variant='h6' align=\"center\" color=\"textSecondary\">\r\n                        Results\r\n                </Typography>\r\n                <Divider className={classes.items} variant=\"middle\" />\r\n                <div className={classes.centered}>\r\n                    <div className={classes.items}>\r\n                        <Typography variant='subtitle1' color=\"textPrimary\">\r\n                        Total Score: <b> {props.score} (+{props.score - props.prevScore}) </b> <br />\r\n                        Round Duration: <b> {Math.round(props.gameDuration/60)}m {Math.round(props.gameDuration%60)}s </b> <br />\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                <Divider className={classes.items} />\r\n                {waiting &&\r\n                    <div>\r\n                        <div className={classes.centered}>\r\n                            <Typography className={classes.items} color='textSecondary'>\r\n                                {loadingMessage} \r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.centered}>\r\n                            <CircularProgress className={classes.items} />\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {!waiting &&\r\n                    <div className={classes.centered} >\r\n                        <Button\r\n                            className={classes.items}\r\n                            color=\"primary\"\r\n                            onClick={e => handlePlayAgain()}\r\n                        >\r\n                            Play Again\r\n                        </Button>\r\n                    </div>\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default EndGameMenu;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\User.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\SignIn.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx",["119"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\game_settings.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\HowToPlay.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\SignedIn.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":48,"column":8,"nodeType":"126","endLine":48,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":17,"column":5,"nodeType":"130","messageId":"131","endLine":17,"endColumn":19},{"ruleId":"124","severity":1,"message":"132","line":138,"column":7,"nodeType":"126","endLine":138,"endColumn":9,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"134","line":28,"column":7,"nodeType":"126","endLine":28,"endColumn":19,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"136","line":35,"column":8,"nodeType":"126","endLine":35,"endColumn":42,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"138","line":98,"column":8,"nodeType":"126","endLine":98,"endColumn":24,"suggestions":"139"},{"ruleId":"124","severity":1,"message":"140","line":54,"column":8,"nodeType":"126","endLine":54,"endColumn":10,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"142","line":58,"column":8,"nodeType":"126","endLine":58,"endColumn":10,"suggestions":"143"},{"ruleId":"124","severity":1,"message":"144","line":97,"column":7,"nodeType":"126","endLine":97,"endColumn":9,"suggestions":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'afterSocketConnect', 'gameID', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["148"],"@typescript-eslint/no-unused-vars","'GameUpdateData' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'handleGameStatus'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'createView' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["150"],"React Hook useEffect has a missing dependency: 'streetView'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["152"],"React Hook useEffect has a missing dependency: 'fetchGameID'. Either include it or remove the dependency array.",["153"],"React Hook useEffect has a missing dependency: 'waitForGame'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has missing dependencies: 'history' and 'query'. Either include them or remove the dependency array.",["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [afterSocketConnect, gameID, history]",{"range":"172","text":"173"},"Update the dependencies array to be: [handleGameStatus]",{"range":"174","text":"175"},"Update the dependencies array to be: [createView, props, streetView]",{"range":"176","text":"177"},"Update the dependencies array to be: [props.streetViewOptions.position, streetView]",{"range":"178","text":"179"},"Update the dependencies array to be: [props.messages, scrollToBottom]",{"range":"180","text":"181"},"Update the dependencies array to be: [fetchGameID]",{"range":"182","text":"183"},"Update the dependencies array to be: [waitForGame]",{"range":"184","text":"185"},"Update the dependencies array to be: [history, query]",{"range":"186","text":"187"},[1476,1478],"[afterSocketConnect, gameID, history]",[3938,3940],"[handleGameStatus]",[951,963],"[createView, props, streetView]",[1193,1227],"[props.streetViewOptions.position, streetView]",[2972,2988],"[props.messages, scrollToBottom]",[1407,1409],"[fetchGameID]",[1366,1368],"[waitForGame]",[2790,2792],"[history, query]"]