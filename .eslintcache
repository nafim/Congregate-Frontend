[{"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx":"1","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx":"3","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx":"4","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx":"5","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx":"6","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx":"7","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx":"8","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx":"9","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx":"10","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx":"11","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx":"12","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx":"13","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\GameSocket.ts":"14","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\HTTPRequests.ts":"15","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\constants.ts":"16","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\Intro.tsx":"17","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\HowToPlay.tsx":"18","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\MainMenu.tsx":"19","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\LandingMenu.tsx":"20","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\RandomGame.tsx":"21","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\PrivateGame.tsx":"22","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\User.tsx":"23","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignIn.tsx":"24","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignedIn.tsx":"25","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\Username.tsx":"26","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\Leaderboard.tsx":"27","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\LeaderboardList.tsx":"28","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\theme.ts":"29"},{"size":756,"mtime":1612319715089,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":499162500000,"results":"32","hashOfConfig":"31"},{"size":813,"mtime":1611614029504,"results":"33","hashOfConfig":"31"},{"size":2820,"mtime":1612319446722,"results":"34","hashOfConfig":"31"},{"size":245,"mtime":1612289851941,"results":"35","hashOfConfig":"31"},{"size":8994,"mtime":1612376886108,"results":"36","hashOfConfig":"31"},{"size":2017,"mtime":1612321655377,"results":"37","hashOfConfig":"31"},{"size":2842,"mtime":1612224390928,"results":"38","hashOfConfig":"31"},{"size":4889,"mtime":1612377767646,"results":"39","hashOfConfig":"31"},{"size":2560,"mtime":1612378440900,"results":"40","hashOfConfig":"31"},{"size":4865,"mtime":1612123201684,"results":"41","hashOfConfig":"31"},{"size":3787,"mtime":1612027263101,"results":"42","hashOfConfig":"31"},{"size":6813,"mtime":1612132022256,"results":"43","hashOfConfig":"31"},{"size":6594,"mtime":1612220459507,"results":"44","hashOfConfig":"31"},{"size":5404,"mtime":1612305737284,"results":"45","hashOfConfig":"31"},{"size":200,"mtime":1612297605684,"results":"46","hashOfConfig":"31"},{"size":1281,"mtime":1612322436642,"results":"47","hashOfConfig":"31"},{"size":2045,"mtime":1612289628613,"results":"48","hashOfConfig":"31"},{"size":2024,"mtime":1612289651021,"results":"49","hashOfConfig":"31"},{"size":1789,"mtime":1612289648724,"results":"50","hashOfConfig":"31"},{"size":3010,"mtime":1612289655829,"results":"51","hashOfConfig":"31"},{"size":3087,"mtime":1612289653467,"results":"52","hashOfConfig":"31"},{"size":1578,"mtime":1612289644495,"results":"53","hashOfConfig":"31"},{"size":5874,"mtime":1612295677602,"results":"54","hashOfConfig":"31"},{"size":4859,"mtime":1612289640412,"results":"55","hashOfConfig":"31"},{"size":6145,"mtime":1612289646596,"results":"56","hashOfConfig":"31"},{"size":5314,"mtime":1612377111801,"results":"57","hashOfConfig":"31"},{"size":3247,"mtime":1612377147641,"results":"58","hashOfConfig":"31"},{"size":241,"mtime":1612322194829,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tp3sg3",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts",[],["125","126"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx",["127"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx",["128"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx",["129","130","131"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport { Loader } from \"@googlemaps/js-api-loader\";\r\n\r\ninterface StreetViewProps {\r\n    apiKey: string;\r\n    position: google.maps.LatLngLiteral;\r\n    markerPosition: google.maps.LatLngLiteral;\r\n    onPositionChanged: (position: google.maps.LatLngLiteral) => void;\r\n};\r\n\r\nfunction StreetView(props: StreetViewProps) {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const loader = new Loader({\r\n        apiKey: props.apiKey,\r\n        version: \"weekly\"\r\n    });\r\n    const [streetView, setStreetView] = useState<google.maps.StreetViewPanorama>();\r\n    const [marker, setMarker] = useState<google.maps.Marker>();\r\n\r\n    useEffect(() => {\r\n        createView(ref);\r\n        if (streetView) {\r\n            streetView!.addListener('position_changed', () => {\r\n                props.onPositionChanged(streetView!.getPosition().toJSON());\r\n            })\r\n            // if marker already exists\r\n            if (marker) {\r\n                marker.setMap(streetView);\r\n            // else create a new marker\r\n            } else {\r\n                setMarker(new google.maps.Marker({\r\n                    position: props.markerPosition,\r\n                    map: streetView,\r\n                    icon: 'http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=wc-male|FFFF00',\r\n                    // icon: 'http://maps.google.com/mapfiles/ms/micons/man.png',\r\n                    title: 'Other Player'\r\n                }))\r\n            }\r\n            return () => {\r\n                google.maps.event.clearInstanceListeners(streetView!);\r\n            }\r\n        }\r\n    },[streetView])\r\n\r\n    // if streetView has been created, then upon position change, update streetView\r\n    useEffect(() => {\r\n        if (streetView) {\r\n            streetView.setPosition(props.position);\r\n        }\r\n    }, [props.position])\r\n\r\n    // if marker has been created, then upon position change, update marker\r\n    useEffect(() => {\r\n        if (marker) {\r\n            marker.setPosition(props.markerPosition);\r\n        }\r\n    }, [props.markerPosition])\r\n\r\n    const createView = (ref: React.RefObject<HTMLDivElement>) => {\r\n        if (!streetView) {\r\n            loader\r\n            .load()\r\n            .then(() => {\r\n                setStreetView(new google.maps.StreetViewPanorama(ref.current!, {\r\n                    position: props.position,\r\n                    pov: { heading: 165, pitch: 0 },\r\n                    motionTracking: false,\r\n                    motionTrackingControl: false,\r\n                    addressControl: false,\r\n                }));\r\n            })\r\n            .catch(e => {\r\n                console.error(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '100%', width: \"100%\" }} ref={ref}/>\r\n    );\r\n\r\n}\r\n\r\nexport default StreetView;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx",["132"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx",["133"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ListChildComponentProps, VariableSizeList as MessageList } from 'react-window';\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: '2px solid rgba(0, 0, 0, 0.12)',\r\n        overflow: 'hidden',\r\n        padding: theme.spacing(2, 0, 0),\r\n        margin: theme.spacing(1, 1, 1),\r\n        height: \"100%\",\r\n    },\r\n    messageContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    messageContent: {\r\n        display: 'flex',\r\n        wordBreak: 'break-word',\r\n        flexDirection: 'column',\r\n        width: '65%',\r\n    }\r\n}));\r\n\r\nexport enum Sender {\r\n    Other='other',\r\n    Me='me',\r\n    Alert='alert'\r\n}\r\n\r\nfunction MessageRow({index, data, style}: ListChildComponentProps) {\r\n    const classes = useStyles();\r\n    const rowRef = useRef<HTMLDivElement>(null);\r\n    const message = data.messages[index];\r\n    \r\n    const showName = () => {\r\n        if (index === 0) return true; \r\n        const prevMessage = data.messages[index-1];\r\n        return (message.sender !== prevMessage.sender || message.user !== prevMessage.user)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowRef.current) {\r\n            data.setRowHeight(index, rowRef.current.clientHeight);\r\n        }\r\n        // eslint-disable-next-line\r\n        }, [rowRef]);\r\n\r\n    if (message.sender === Sender.Alert) {\r\n        return (\r\n            <div style={style}>\r\n                <div ref={rowRef} \r\n                className={classes.messageContainer} \r\n                style={{alignItems: \"center\"}}\r\n                >\r\n                    <div \r\n                        className={classes.messageContent}\r\n                    >\r\n                        <Typography\r\n                            variant='caption'\r\n                            color='textSecondary'\r\n                            align='center'\r\n                        > \r\n                            {message.messageText}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={style}>\r\n                <div ref={rowRef} \r\n                className={classes.messageContainer} \r\n                style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                >\r\n                    <div \r\n                        className={classes.messageContent}\r\n                        style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                    >\r\n                        {\r\n                            showName() &&\r\n                            <Typography variant='caption' color='textSecondary'> {message.name} </Typography>\r\n\r\n                        }\r\n                        <Typography variant='body1'> {message.messageText} </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport interface Message {\r\n    messageText: string;\r\n    name: string;\r\n    sender: Sender;\r\n}\r\n\r\ninterface MessageBoxProps {\r\n    messages: Message[];\r\n}\r\n\r\nfunction MessageBox(props: MessageBoxProps) {\r\n    const classes = useStyles();\r\n    // References\r\n    const listRef = useRef<MessageList>(null);\r\n    const rowHeights = useRef<{[index: number]: number}>({});\r\n\r\n    useEffect(() => {\r\n        if (props.messages.length > 0) {\r\n            if (listRef.current) {\r\n                scrollToBottom();\r\n            }\r\n        }\r\n    }, [props.messages]);\r\n\r\n    function setRowHeight(index: number, size: number) {\r\n        listRef.current!.resetAfterIndex(0);\r\n        rowHeights.current = { ...rowHeights.current, [index]: size };\r\n    }\r\n\r\n    function scrollToBottom() {\r\n        listRef.current!.scrollToItem(props.messages.length - 1, \"end\");\r\n    }\r\n\r\n    function getRowHeight(index: number) {\r\n        return rowHeights.current[index] + 8 || 82;\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <MessageList\r\n                    className=\"List\"\r\n                    height={height}\r\n                    itemCount={props.messages.length}\r\n                    itemSize={getRowHeight}\r\n                    ref={listRef}\r\n                    width={width}\r\n                    itemData={{messages: props.messages, setRowHeight}}\r\n                >\r\n                    {MessageRow}\r\n                </MessageList>\r\n                )}\r\n            </AutoSizer>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MessageBox;\r\n\r\n","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx",["134"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    GameStatus,\r\n    GameStatusData,\r\n    sendPlayerReady, \r\n    subscribeToGameStatus,\r\n} from '../../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CircularProgress,\r\n    Divider,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    message: {\r\n        margin: theme.spacing(0,5,2)\r\n    },\r\n    items: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface EndGameMenuProps {\r\n    message: string;\r\n    score: number;\r\n    prevScore: number;\r\n    gameDuration: number;\r\n    handleEndGameMenuOpen: (open: boolean) => void;\r\n}\r\n\r\nfunction EndGameMenu(props: EndGameMenuProps) {\r\n    const classes = useStyles();\r\n\r\n    const [waiting, setwaiting] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n    const handlePlayAgain = () => {\r\n        sendPlayerReady();\r\n        setwaiting(true);\r\n        setLoadingMessage(\"Waiting for other player...\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(waitForGame);\r\n    }, []);\r\n\r\nconst waitForGame = (data: GameStatusData) => {\r\n    if (data.status === GameStatus.Starting) {\r\n        setLoadingMessage(\"Starting...\");\r\n    }\r\n    if (data.status === GameStatus.InProgress) {\r\n        setwaiting(false);\r\n        props.handleEndGameMenuOpen(false);\r\n    }\r\n}\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <div className={classes.message}>\r\n                    <Typography variant='h4' align=\"center\" color=\"textPrimary\">\r\n                        {props.message}\r\n                    </Typography>\r\n                </div>\r\n                <Typography variant='h6' align=\"center\" color=\"textSecondary\">\r\n                        Results\r\n                </Typography>\r\n                <Divider className={classes.items} variant=\"middle\" />\r\n                <div className={classes.centered}>\r\n                    <div className={classes.items}>\r\n                        <Typography variant='subtitle1' color=\"textPrimary\">\r\n                        Total Score: <b> {props.score} (+{props.score - props.prevScore}) </b> <br />\r\n                        Round Duration: <b> {Math.round(props.gameDuration/60)}m {Math.round(props.gameDuration%60)}s </b> <br />\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                {waiting &&\r\n                    <div className={classes.items}>\r\n                        <div className={classes.centered}>\r\n                            <Typography className={classes.items} color='textSecondary'>\r\n                                {loadingMessage} \r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.centered}>\r\n                            <CircularProgress className={classes.items} />\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {!waiting &&\r\n                    <div className={classes.centered} >\r\n                        <Button\r\n                            className={classes.items}\r\n                            color=\"primary\"\r\n                            onClick={e => handlePlayAgain()}\r\n                        >\r\n                            Play Again\r\n                        </Button>\r\n                    </div>\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default EndGameMenu;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx",["135"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    CircularProgress,\r\n    FormControl,\r\n    FormHelperText,\r\n    IconButton,\r\n    InputAdornment,\r\n    OutlinedInput,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getUserToken, register } from '../../api/HTTPRequests';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useSnackbar } from 'notistack';\r\nimport constants from '../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    menuContainer: {\r\n        border: '2px solid rgba(0, 0, 0, 0.12)',\r\n        padding: theme.spacing(2,2,0),\r\n        display: 'inline-flex',\r\n    },\r\n    introButtons: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(0),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    introTitle: {\r\n        color: \"black\",\r\n        \"font-family\": \"Arial, cursive\",\r\n        \"font-size\": \"4.7rem\",\r\n        \"text-align\": \"center\",\r\n        marginBottom: theme.spacing(8)\r\n    },\r\n    item: {\r\n        margin: theme.spacing(0, 0, 2)\r\n    }\r\n}));\r\n\r\nfunction Intro() {\r\n    const classes = useStyles();\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const history = useHistory();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [promptUsername, setPromptUsername] = useState(false);\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [usernameError, setUsernameError] = useState(false);\r\n    const [usernameErrorText, setUsernameErrorText] = useState(\"\");\r\n\r\n    const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUsername(event.target.value);\r\n        setUsernameError(false);\r\n        setUsernameErrorText(\"\");\r\n    }\r\n\r\n    const isValidUsername = () => {\r\n        if (!username) {\r\n            setUsernameError(true);\r\n            setUsernameErrorText(\"Please enter a username\")\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const handleEnterUsername = () => {\r\n        if (isValidUsername()) {\r\n            register(username, query.get(\"key\")!)\r\n            .then(data => {\r\n                if (data.errors.length > 0) {\r\n                    const error = data.errors[0];\r\n                    if (error.param === 'username') {\r\n                        setUsernameError(true);\r\n                        setUsernameErrorText(error.msg);\r\n                    } else {\r\n                        enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                            variant: 'error',\r\n                        })\r\n                    }\r\n                } else {\r\n                    history.push('/');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                    variant: 'error',\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if theres no query key, then \r\n        if (!query.get(\"key\")) {\r\n            return history.push('/');\r\n        }\r\n        getUserToken(query.get(\"key\")!)\r\n        .then(data => {\r\n            if (data.error) {\r\n                // if there is an error it has to be invalid key, so just reroute home\r\n                return history.push('/');\r\n            }\r\n            if (data.registered) {\r\n                return history.push('/');\r\n            } else {\r\n                setPromptUsername(true);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                variant: 'error',\r\n            })\r\n        })\r\n    },[])\r\n\r\n    return (\r\n        <div className={classes.heroContent}>\r\n            <div>\r\n                <Typography className={classes.introTitle}>Congregate</Typography>\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <div className={classes.menuContainer}>\r\n                    {!promptUsername &&\r\n                        <div>\r\n                            <div className={classes.centered}>\r\n                                <Typography className={classes.item} color='textSecondary'>\r\n                                    Verifying ...\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.centered}>\r\n                                <CircularProgress className={classes.item} />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {promptUsername &&\r\n                        <div>\r\n                            <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                                Create your username:\r\n                            </Typography>\r\n                            <form noValidate autoComplete=\"off\" onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                handleEnterUsername();\r\n                            }}>\r\n                                <FormControl error={usernameError}>\r\n                                    <OutlinedInput\r\n                                        id=\"gameID\"\r\n                                        type='text'\r\n                                        placeholder='Username'\r\n                                        value={username}\r\n                                        onChange={handleUsernameChange}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                aria-label=\"submit login info\"\r\n                                                edge=\"end\"\r\n                                                onClick={handleEnterUsername}\r\n                                                >\r\n                                                    <ArrowForward />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                    <FormHelperText id=\"username-error-text\">{usernameErrorText}</FormHelperText>\r\n                                </FormControl>\r\n                            </form>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Intro;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\GameSocket.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\api\\HTTPRequests.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\constants.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\Intro.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\HowToPlay.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\MainMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\LandingMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\RandomGame.tsx",["136"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    initiateSocket,\r\n    disconnectSocket,\r\n    subscribeToMatchSuccess,\r\n    MatchSuccessData,\r\n} from '../../../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { grabAndVerifyToken } from '../../../../api/HTTPRequests';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MainMenuState } from './MainMenu';\r\nimport { useSnackbar } from 'notistack';\r\nimport constants from '../../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    instructions: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cancelButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface RandomGameProps {\r\n    handleStateChange: (newState: MainMenuState) => void;\r\n}\r\n\r\n\r\nfunction RandomGame(props: RandomGameProps) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const handleCancel = () => {\r\n        disconnectSocket();\r\n        props.handleStateChange(MainMenuState.LandingMenu);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGameID();\r\n    }, [])\r\n\r\n    const fetchGameID = () => {\r\n        // check if token exists, then make socket connection\r\n        grabAndVerifyToken()\r\n        .then(token => {\r\n            initiateSocket(token, undefined, afterSocketConnect);\r\n        })\r\n        .catch(error => {\r\n            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                variant: 'error',\r\n            })\r\n        })\r\n    }\r\n\r\n    const afterSocketConnect = () => {\r\n        console.log(\"Connected\")\r\n        subscribeToMatchSuccess(waitForMatch);\r\n    }\r\n\r\n    const waitForMatch = (matchSuccessData: MatchSuccessData) => {\r\n        const gameID = matchSuccessData.gameID;\r\n        disconnectSocket();\r\n        history.push(`/play/${gameID}`);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.instructions}>\r\n                <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                    Finding a match...\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.instructions}>\r\n                    <CircularProgress />\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <Button\r\n                className={classes.cancelButton} \r\n                color=\"secondary\"\r\n                onClick={e => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomGame;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\PrivateGame.tsx",["137"],"import React, { useState, useEffect } from 'react';\r\nimport { Link as RouterLink} from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Link,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { getGameID } from '../../../../api/HTTPRequests';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MainMenuState } from './MainMenu';\r\nimport { useSnackbar } from 'notistack';\r\nimport constants from '../../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    instructions: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cancelButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface PrivateGameProps {\r\n    handleStateChange: (newState: MainMenuState) => void;\r\n}\r\n\r\n\r\nfunction PrivateGame(props: PrivateGameProps) {\r\n    const classes = useStyles();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [gameID, setGameID] = useState(\"\");\r\n\r\n    const handleCancel = () => {\r\n        props.handleStateChange(MainMenuState.LandingMenu);\r\n    }\r\n\r\n    const fetchGameID = () => {\r\n        getGameID()\r\n        .then(data => {\r\n            if (data.error) {\r\n                enqueueSnackbar(data.error, { \r\n                    variant: 'error',\r\n                })\r\n            }\r\n            if (data.gameID) {\r\n                setGameID(data.gameID);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            enqueueSnackbar(constants.ERROR_MESSAGE, { \r\n                variant: 'error',\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGameID();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.instructions}>\r\n                <Typography variant='subtitle1' align='center' color='textSecondary'>\r\n                    Join the game using the following link:\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.instructions}>\r\n                {gameID && \r\n                    <Typography variant='h5' align='center' color='textPrimary'>\r\n                            <Link component={RouterLink} to={`/play/${gameID}`}>\r\n                                {`${process.env.REACT_APP_WEBSITE_DOMAIN}/play/${gameID}`}\r\n                            </Link>\r\n                    </Typography>\r\n                }\r\n                {!gameID &&\r\n                    <CircularProgress />\r\n                }\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <Button\r\n                className={classes.cancelButton} \r\n                color=\"secondary\"\r\n                onClick={e => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrivateGame;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\User.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignIn.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\SignedIn.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro\\GameMenus\\User\\Username.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\Leaderboard.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\LeaderBoard\\LeaderboardList.tsx",["138"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\theme.ts",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":55,"column":8,"nodeType":"145","endLine":55,"endColumn":10,"suggestions":"146"},{"ruleId":"143","severity":1,"message":"147","line":160,"column":7,"nodeType":"145","endLine":160,"endColumn":9,"suggestions":"148"},{"ruleId":"143","severity":1,"message":"149","line":43,"column":7,"nodeType":"145","endLine":43,"endColumn":19,"suggestions":"150"},{"ruleId":"143","severity":1,"message":"151","line":50,"column":8,"nodeType":"145","endLine":50,"endColumn":24,"suggestions":"152"},{"ruleId":"143","severity":1,"message":"153","line":57,"column":8,"nodeType":"145","endLine":57,"endColumn":30,"suggestions":"154"},{"ruleId":"143","severity":1,"message":"155","line":70,"column":7,"nodeType":"145","endLine":70,"endColumn":9,"suggestions":"156"},{"ruleId":"143","severity":1,"message":"157","line":122,"column":8,"nodeType":"145","endLine":122,"endColumn":24,"suggestions":"158"},{"ruleId":"143","severity":1,"message":"159","line":58,"column":8,"nodeType":"145","endLine":58,"endColumn":10,"suggestions":"160"},{"ruleId":"143","severity":1,"message":"161","line":126,"column":7,"nodeType":"145","endLine":126,"endColumn":9,"suggestions":"162"},{"ruleId":"143","severity":1,"message":"163","line":57,"column":8,"nodeType":"145","endLine":57,"endColumn":10,"suggestions":"164"},{"ruleId":"143","severity":1,"message":"163","line":71,"column":8,"nodeType":"145","endLine":71,"endColumn":10,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":77,"column":11,"nodeType":"168","messageId":"169","endLine":77,"endColumn":18},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'afterSocketConnect', 'enqueueSnackbar', 'gameID', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["172"],"React Hook useEffect has a missing dependency: 'handleGameStatus'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'createView', 'marker', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["174"],"React Hook useEffect has a missing dependency: 'streetView'. Either include it or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'marker'. Either include it or remove the dependency array.",["176"],"React Hook useEffect has missing dependencies: 'otherPlayerConnect', 'otherPlayerDisconnect', 'receiveMessage', and 'showCurrentPlayers'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["178"],"React Hook useEffect has a missing dependency: 'waitForGame'. Either include it or remove the dependency array.",["179"],"React Hook useEffect has missing dependencies: 'enqueueSnackbar', 'history', and 'query'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has a missing dependency: 'fetchGameID'. Either include it or remove the dependency array.",["181"],["182"],"@typescript-eslint/no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"201","fix":"203"},"Update the dependencies array to be: [afterSocketConnect, enqueueSnackbar, gameID, history]",{"range":"204","text":"205"},"Update the dependencies array to be: [handleGameStatus]",{"range":"206","text":"207"},"Update the dependencies array to be: [createView, marker, props, streetView]",{"range":"208","text":"209"},"Update the dependencies array to be: [props.position, streetView]",{"range":"210","text":"211"},"Update the dependencies array to be: [marker, props.markerPosition]",{"range":"212","text":"213"},"Update the dependencies array to be: [otherPlayerConnect, otherPlayerDisconnect, receiveMessage, showCurrentPlayers]",{"range":"214","text":"215"},"Update the dependencies array to be: [props.messages, scrollToBottom]",{"range":"216","text":"217"},"Update the dependencies array to be: [waitForGame]",{"range":"218","text":"219"},"Update the dependencies array to be: [enqueueSnackbar, history, query]",{"range":"220","text":"221"},"Update the dependencies array to be: [fetchGameID]",{"range":"222","text":"223"},{"range":"224","text":"223"},[1748,1750],"[afterSocketConnect, enqueueSnackbar, gameID, history]",[4806,4808],"[handleGameStatus]",[1629,1641],"[createView, marker, props, streetView]",[1852,1868],"[props.position, streetView]",[2069,2091],"[marker, props.markerPosition]",[1961,1963],"[otherPlayerConnect, otherPlayerDisconnect, receiveMessage, showCurrentPlayers]",[3764,3780],"[props.messages, scrollToBottom]",[1369,1371],"[waitForGame]",[3912,3914],"[enqueueSnackbar, history, query]",[1558,1560],"[fetchGameID]",[1906,1908]]