[{"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx":"1","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx":"3","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx":"4","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx":"5","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro.tsx":"6","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\MainMenu.tsx":"7","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\LandingMenu.tsx":"8","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx":"9","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx":"10","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\PrivateGame.tsx":"11","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx":"12","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx":"13","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx":"14","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx":"15","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\GameSocket.ts":"16","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\HTTPRequests.ts":"17","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\RandomGame.tsx":"18","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx":"19","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\User.tsx":"20","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\SignIn.tsx":"21","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx":"22"},{"size":500,"mtime":1610837147249,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":813,"mtime":1611614029504,"results":"26","hashOfConfig":"24"},{"size":2740,"mtime":1611688898680,"results":"27","hashOfConfig":"24"},{"size":121,"mtime":1611267688561,"results":"28","hashOfConfig":"24"},{"size":1361,"mtime":1611267664966,"results":"29","hashOfConfig":"24"},{"size":2024,"mtime":1611349285824,"results":"30","hashOfConfig":"24"},{"size":1690,"mtime":1611610863963,"results":"31","hashOfConfig":"24"},{"size":5316,"mtime":1611606611985,"results":"32","hashOfConfig":"24"},{"size":2051,"mtime":1611606438142,"results":"33","hashOfConfig":"24"},{"size":2689,"mtime":1611348989709,"results":"34","hashOfConfig":"24"},{"size":1781,"mtime":1611515345479,"results":"35","hashOfConfig":"24"},{"size":3095,"mtime":1611605077581,"results":"36","hashOfConfig":"24"},{"size":2237,"mtime":1611605065526,"results":"37","hashOfConfig":"24"},{"size":4083,"mtime":1611604155606,"results":"38","hashOfConfig":"24"},{"size":3506,"mtime":1611521031720,"results":"39","hashOfConfig":"24"},{"size":1797,"mtime":1611688030670,"results":"40","hashOfConfig":"24"},{"size":2901,"mtime":1611688094235,"results":"41","hashOfConfig":"24"},{"size":2789,"mtime":1611357431185,"results":"42","hashOfConfig":"24"},{"size":1539,"mtime":1611687757212,"results":"43","hashOfConfig":"24"},{"size":4541,"mtime":1611688253778,"results":"44","hashOfConfig":"24"},{"size":4438,"mtime":1611620925163,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"tp3sg3",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\index.tsx",[],["97","98"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\App.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Play.tsx",["99"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Home.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\Intro.tsx",["100","101","102","103","104","105"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormHelperText,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MainMenu from './GameMenus/MainMenu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    introButtons: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(0),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    introTitle: {\r\n        color: \"black\",\r\n        \"font-family\": \"Arial, cursive\",\r\n        \"font-size\": \"4.7rem\",\r\n        \"text-align\": \"center\",\r\n        marginBottom: theme.spacing(8)\r\n    }\r\n}));\r\n\r\nfunction Intro() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.heroContent}>\r\n            <div>\r\n                <Typography className={classes.introTitle}>Congregate</Typography>\r\n            </div>\r\n            <div className={classes.centered}>\r\n                <MainMenu />\r\n            </div>\r\n            <div className={classes.centered}>\r\n                    <Button className={classes.introButtons}>How to Play</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Intro;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\MainMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\LandingMenu.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Game.tsx",["106"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport {\r\n    disconnectSocket,\r\n    subscribeToGameStatus,\r\n    GameStatusData,\r\n    GameStatus,\r\n    GamePosition,\r\n    GameUpdateData,\r\n    sendGameUpdate,\r\n} from '../api/GameSocket';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport StreetView from './components/StreetView';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport EndGameMenu from './components/EndGameMenu';\r\n\r\nconst drawerWidth = 350;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        \"flex-flow\": \"column\",\r\n        height: \"100vh\",\r\n        width: \"100vw\"\r\n    },\r\n    topBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    topBarShift: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginRight: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            })\r\n        }\r\n    },\r\n    chatButton: {\r\n        marginRight: theme.spacing(1),\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    content: {\r\n        height: \"100%\",\r\n        display: \"flex\"\r\n    }\r\n}));\r\n\r\ninterface GameProps{\r\n    position: GamePosition;\r\n}\r\n\r\nfunction Game(props: GameProps) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const [endGameMessage, setEndGameMessage] = useState('');\r\n    const [endGameMenuOpen, setEndGameMenuOpen] = useState(false);\r\n    const [timeRemaining, setTimeRemainging] = useState(300);\r\n\r\n    const handleChatToggle = () => {\r\n        setChatOpen(!chatOpen);\r\n    }\r\n\r\n    const handleExit = () => {\r\n        disconnectSocket();\r\n        history.push('/');\r\n    }\r\n\r\n    const handleEndGameMenuOpen = (open: boolean) => {\r\n        setEndGameMenuOpen(open);\r\n    }\r\n\r\n    const handlePositionChange = (newPosition: GamePosition) => {\r\n        sendGameUpdate({pos: newPosition});\r\n    }\r\n\r\n    const timer = () => {\r\n        return (`${Math.floor(timeRemaining/60)}:${Math.round(timeRemaining % 60)}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(handleGameStatus);\r\n    })\r\n\r\n    const handleGameStatus = (gameStatusData: GameStatusData) => {\r\n        if (gameStatusData.status === GameStatus.Win) {\r\n            setEndGameMessage(\"You found your friend!\");\r\n            setEndGameMenuOpen(true);\r\n        }\r\n        if (gameStatusData.status === GameStatus.Loss) {\r\n            setEndGameMessage(\"Time's Up!\");\r\n            setEndGameMenuOpen(true);\r\n        }\r\n        setTimeRemainging(gameStatusData.timeRemaining);\r\n    }\r\n\r\n    const streetViewOptions = {\r\n        position: props.position,\r\n        pov: { heading: 165, pitch: 0 },\r\n        motionTracking: false,\r\n        motionTrackingControl: false,\r\n        addressControl: false,\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={clsx(classes.topBar, {[classes.topBarShift]: chatOpen,})}>\r\n                <AppBar style={{backgroundColor: \"#4a4a50\"}} position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Time Remaining: {timer()}\r\n                        </Typography>\r\n                        <Button \r\n                            color=\"inherit\"\r\n                            onClick={e => handleExit()}\r\n                        >\r\n                            Exit\r\n                        </Button>\r\n                        <IconButton edge=\"start\" className={classes.chatButton} color=\"inherit\" aria-label=\"chat\"\r\n                            onClick={handleChatToggle}\r\n                        >\r\n                            <ChatIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <ChatWindow\r\n                    chatOpen={chatOpen}\r\n                    handleChatToggle={handleChatToggle}\r\n                />\r\n            </div>\r\n            <div className={classes.content}>\r\n                {\r\n                    endGameMenuOpen &&\r\n                    <EndGameMenu\r\n                        message={endGameMessage}\r\n                        handleEndGameMenuOpen={handleEndGameMenuOpen}\r\n                    />\r\n                }\r\n                <StreetView\r\n                    apiKey={process.env.REACT_APP_MAPS_API_KEY!}\r\n                    streetViewOptions={streetViewOptions}\r\n                    onPositionChanged={handlePositionChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\Loading.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\PrivateGame.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\StreetView.tsx",["107"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport { Loader } from \"@googlemaps/js-api-loader\";\r\n\r\ninterface StreetViewProps {\r\n    apiKey: string;\r\n    streetViewOptions: google.maps.StreetViewPanoramaOptions;\r\n    onPositionChanged: (position: google.maps.LatLngLiteral) => void;\r\n};\r\n\r\nfunction StreetView(props: StreetViewProps) {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const loader = new Loader({\r\n        apiKey: props.apiKey,\r\n        version: \"weekly\"\r\n    })\r\n    const [streetView, setStreetView] = useState<google.maps.StreetViewPanorama>();\r\n\r\n    useEffect(() => {\r\n        createView(ref);\r\n        return () => {\r\n            google.maps.event.clearInstanceListeners(streetView!);\r\n        }\r\n    },[props.streetViewOptions.position])\r\n\r\n    useEffect(() => {\r\n        if (streetView) {\r\n            streetView!.addListener('position_changed', () => {\r\n                props.onPositionChanged(streetView!.getPosition().toJSON());\r\n            })\r\n        }\r\n    })\r\n\r\n    const createView = (ref: React.RefObject<HTMLDivElement>) => {\r\n        if (!streetView) {\r\n            loader\r\n            .load()\r\n            .then(() => {\r\n                setStreetView(new google.maps.StreetViewPanorama(ref.current!, props.streetViewOptions));\r\n                streetView!.addListener('position_changed', () => {\r\n                    props.onPositionChanged(streetView!.getPosition().toJSON());\r\n                })\r\n            })\r\n            .catch(e => {\r\n                console.error(e);\r\n            });\r\n        } else {\r\n            streetView.setPosition(props.streetViewOptions.position!);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '100%', width: \"100%\" }} ref={ref}/>\r\n    );\r\n\r\n}\r\n\r\nexport default StreetView;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatWindow.tsx",["108","109","110","111","112"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    IconButton,\r\n    Typography,\r\n    Drawer,\r\n    Divider,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport MessageBox, { Message, Sender } from './MessageBox';\r\nimport ChatInput from './ChatInput';\r\nimport { MessageEventData, sendMessage, subscribeToMessage } from '../../api/GameSocket';\r\n\r\nconst drawerWidth = 350;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n        width: \"100%\"\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: \"100%\",\r\n        },\r\n    },\r\n    chatHeader: {\r\n        display: \"flex\",\r\n        backgroundColor: \"#353536\",\r\n        alignItems: \"center\",\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content below header to be below topBar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: \"center\"\r\n    }\r\n}));\r\n\r\ninterface ChatWindowProps {\r\n    chatOpen: boolean\r\n    handleChatToggle: () => void\r\n}\r\n\r\nfunction ChatWindow(props: ChatWindowProps) {\r\n    const classes = useStyles();\r\n\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n\r\n    useEffect(() => {\r\n        subscribeToMessage(receiveMessage);\r\n    },[])\r\n\r\n    const receiveMessage = (messageData: MessageEventData) => {\r\n        const newMessage = {\r\n            messageText: messageData.text,\r\n            name: messageData.name,\r\n            sender: Sender.Other\r\n        };\r\n        setMessages(messages => [...messages, newMessage]);\r\n    }\r\n\r\n    const addMessage = (messageText: string) => {\r\n        if (!messageText) return;\r\n        const newMessage = {\r\n            messageText,\r\n            name: \"You\",\r\n            sender: Sender.Me\r\n            \r\n        };\r\n        setMessages(messages => [...messages, newMessage]);\r\n        sendMessage(messageText);\r\n    }\r\n\r\n    return (\r\n        <nav aria-label=\"chat window\">\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.chatOpen}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.chatHeader}>\r\n                    <Typography style={{color: \"white\"}} variant='h6' align='center'> Chat </Typography>\r\n                    <IconButton onClick={props.handleChatToggle}>\r\n                        <ChevronRightIcon style={{color: 'white'}} />\r\n                    </IconButton>\r\n                </div>\r\n                <MessageBox\r\n                    messages={messages}\r\n                />\r\n                <ChatInput \r\n                    addMessage={addMessage}\r\n                />\r\n            </Drawer>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default ChatWindow;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\ChatInput.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\MessageBox.tsx",["113","114"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ListChildComponentProps, VariableSizeList as MessageList } from 'react-window';\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: '2px solid rgba(0, 0, 0, 0.12)',\r\n        overflow: 'hidden',\r\n        padding: theme.spacing(2, 0, 0),\r\n        margin: theme.spacing(1, 1, 1),\r\n        height: \"100%\",\r\n    },\r\n    messageContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    messageContent: {\r\n        display: 'flex',\r\n        wordBreak: 'break-word',\r\n        flexDirection: 'column',\r\n        width: '65%',\r\n    }\r\n}));\r\n\r\nexport enum Sender {\r\n    Other='other',\r\n    Me='me'\r\n}\r\n\r\nfunction MessageRow({index, data, style}: ListChildComponentProps) {\r\n    const classes = useStyles();\r\n    const rowRef = useRef<HTMLDivElement>(null);\r\n    const message = data.messages[index];\r\n    \r\n    const showName = () => {\r\n        if (index === 0) return true; \r\n        const prevMessage = data.messages[index-1];\r\n        return (message.sender !== prevMessage.sender || message.user !== prevMessage.user)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rowRef.current) {\r\n            data.setRowHeight(index, rowRef.current.clientHeight);\r\n        }\r\n        // eslint-disable-next-line\r\n        }, [rowRef]);\r\n\r\n    return (\r\n            <div style={style}>\r\n                <div ref={rowRef} \r\n                className={classes.messageContainer} \r\n                style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                >\r\n                    <div \r\n                        className={classes.messageContent}\r\n                        style={message.sender === Sender.Me ? {alignItems: \"end\"} : {alignItems: \"start\"}}\r\n                    >\r\n                        {\r\n                            showName() &&\r\n                            <Typography variant='caption' color='textSecondary'> {message.name} </Typography>\r\n\r\n                        }\r\n                        <Typography variant='body1'> {message.messageText} </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport interface Message {\r\n    messageText: string;\r\n    name: string;\r\n    sender: Sender;\r\n}\r\n\r\ninterface MessageBoxProps {\r\n    messages: Message[];\r\n}\r\n\r\nfunction MessageBox(props: MessageBoxProps) {\r\n    const classes = useStyles();\r\n    // References\r\n    const listRef = useRef<MessageList>(null);\r\n    const rowHeights = useRef<{[index: number]: number}>({});\r\n\r\n    useEffect(() => {\r\n        if (props.messages.length > 0) {\r\n            if (listRef.current) {\r\n                scrollToBottom();\r\n            }\r\n        }\r\n    }, [props.messages]);\r\n\r\n    function setRowHeight(index: number, size: number) {\r\n        listRef.current!.resetAfterIndex(0);\r\n        rowHeights.current = { ...rowHeights.current, [index]: size };\r\n    }\r\n\r\n    function scrollToBottom() {\r\n        listRef.current!.scrollToItem(props.messages.length - 1, \"end\");\r\n    }\r\n\r\n    function getRowHeight(index: number) {\r\n        return rowHeights.current[index] + 8 || 82;\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <MessageList\r\n                    className=\"List\"\r\n                    height={height}\r\n                    itemCount={props.messages.length}\r\n                    itemSize={getRowHeight}\r\n                    ref={listRef}\r\n                    width={width}\r\n                    itemData={{messages: props.messages, setRowHeight}}\r\n                >\r\n                    {MessageRow}\r\n                </MessageList>\r\n                )}\r\n            </AutoSizer>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MessageBox;\r\n\r\n","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\GameSocket.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\api\\HTTPRequests.ts",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\RandomGame.tsx",["115"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Play\\components\\EndGameMenu.tsx",["116"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    GameStatus,\r\n    GameStatusData,\r\n    sendPlayerReady, \r\n    subscribeToGameStatus,\r\n} from '../../api/GameSocket';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CircularProgress,\r\n    Divider,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    message: {\r\n\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    centered: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\ninterface EndGameMenuProps {\r\n    message: string;\r\n    handleEndGameMenuOpen: (open: boolean) => void;\r\n}\r\n\r\n\r\nfunction EndGameMenu(props: EndGameMenuProps) {\r\n    const classes = useStyles();\r\n\r\n    const [waiting, setwaiting] = useState(false);\r\n    const [loadingMessage, setLoadingMessage] = useState(\"\");\r\n\r\n    const handlePlayAgain = () => {\r\n        sendPlayerReady();\r\n        setwaiting(true);\r\n        setLoadingMessage(\"Waiting for other player...\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        subscribeToGameStatus(waitForGame);\r\n    }, []);\r\n\r\nconst waitForGame = (data: GameStatusData) => {\r\n    if (data.status === GameStatus.Starting) {\r\n        setLoadingMessage(\"Starting...\");\r\n    }\r\n    if (data.status === GameStatus.InProgress) {\r\n        setwaiting(false);\r\n        props.handleEndGameMenuOpen(false);\r\n    }\r\n}\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <div className={classes.message}>\r\n                    <Typography variant='h5' align=\"center\" color=\"textSecondary\">\r\n                        {props.message}\r\n                    </Typography>\r\n                    <Typography align=\"center\" color=\"textSecondary\">\r\n                        Here's how you did:\r\n                    </Typography>\r\n                </div>\r\n                <Divider variant=\"middle\" />\r\n                {waiting &&\r\n                    <div>\r\n                        <Typography> {loadingMessage} </Typography>\r\n                        <CircularProgress />\r\n                    </div>\r\n                }\r\n                <div className={classes.button} >\r\n                    <Button color=\"secondary\" onClick={e => handlePlayAgain()}>\r\n                        Play Again\r\n                    </Button>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default EndGameMenu;","C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\User.tsx",["117","118"],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Home\\GameMenus\\User\\SignIn.tsx",[],"C:\\Users\\Nafim\\Desktop\\repos\\congregate-frontend\\src\\views\\Verify\\Verify.tsx",["119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":55,"column":8,"nodeType":"127","endLine":55,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":1,"column":27,"nodeType":"131","messageId":"132","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"134","line":4,"column":5,"nodeType":"131","messageId":"132","endLine":4,"endColumn":16},{"ruleId":"129","severity":1,"message":"135","line":5,"column":5,"nodeType":"131","messageId":"132","endLine":5,"endColumn":19},{"ruleId":"129","severity":1,"message":"136","line":6,"column":5,"nodeType":"131","messageId":"132","endLine":6,"endColumn":15},{"ruleId":"129","severity":1,"message":"137","line":7,"column":5,"nodeType":"131","messageId":"132","endLine":7,"endColumn":18},{"ruleId":"129","severity":1,"message":"138","line":16,"column":5,"nodeType":"131","messageId":"132","endLine":16,"endColumn":19},{"ruleId":"125","severity":1,"message":"139","line":23,"column":7,"nodeType":"127","endLine":23,"endColumn":41,"suggestions":"140"},{"ruleId":"129","severity":1,"message":"141","line":6,"column":5,"nodeType":"131","messageId":"132","endLine":6,"endColumn":12},{"ruleId":"129","severity":1,"message":"142","line":7,"column":5,"nodeType":"131","messageId":"132","endLine":7,"endColumn":9},{"ruleId":"129","severity":1,"message":"143","line":8,"column":5,"nodeType":"131","messageId":"132","endLine":8,"endColumn":13},{"ruleId":"129","severity":1,"message":"144","line":9,"column":5,"nodeType":"131","messageId":"132","endLine":9,"endColumn":17},{"ruleId":"129","severity":1,"message":"145","line":10,"column":5,"nodeType":"131","messageId":"132","endLine":10,"endColumn":17},{"ruleId":"129","severity":1,"message":"130","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"146","line":98,"column":8,"nodeType":"127","endLine":98,"endColumn":24,"suggestions":"147"},{"ruleId":"125","severity":1,"message":"148","line":54,"column":8,"nodeType":"127","endLine":54,"endColumn":10,"suggestions":"149"},{"ruleId":"125","severity":1,"message":"150","line":61,"column":8,"nodeType":"127","endLine":61,"endColumn":10,"suggestions":"151"},{"ruleId":"129","severity":1,"message":"152","line":3,"column":5,"nodeType":"131","messageId":"132","endLine":3,"endColumn":11},{"ruleId":"129","severity":1,"message":"153","line":31,"column":11,"nodeType":"131","messageId":"132","endLine":31,"endColumn":18},{"ruleId":"129","severity":1,"message":"152","line":3,"column":5,"nodeType":"131","messageId":"132","endLine":3,"endColumn":11},{"ruleId":"125","severity":1,"message":"154","line":81,"column":7,"nodeType":"127","endLine":81,"endColumn":9,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'afterSocketConnect', 'gameID', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["158"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FormControl' is defined but never used.","'FormHelperText' is defined but never used.","'InputLabel' is defined but never used.","'OutlinedInput' is defined but never used.","'GameUpdateData' is defined but never used.","React Hook useEffect has missing dependencies: 'createView' and 'streetView'. Either include them or remove the dependency array.",["159"],"'Divider' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'fetchGameID'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'waitForGame'. Either include it or remove the dependency array.",["162"],"'Button' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'query'. Either include them or remove the dependency array.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [afterSocketConnect, gameID, history]",{"range":"176","text":"177"},"Update the dependencies array to be: [createView, props.streetViewOptions.position, streetView]",{"range":"178","text":"179"},"Update the dependencies array to be: [props.messages, scrollToBottom]",{"range":"180","text":"181"},"Update the dependencies array to be: [fetchGameID]",{"range":"182","text":"183"},"Update the dependencies array to be: [waitForGame]",{"range":"184","text":"185"},"Update the dependencies array to be: [history, query]",{"range":"186","text":"187"},[1802,1804],"[afterSocketConnect, gameID, history]",[742,776],"[createView, props.streetViewOptions.position, streetView]",[2982,2998],"[props.messages, scrollToBottom]",[1407,1409],"[fetchGameID]",[1459,1461],"[waitForGame]",[2322,2324],"[history, query]"]